# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from base.v1 import service_pb2 as base_dot_v1_dot_service__pb2


class PermissionStub(object):
    """** PERMISSION SERVICE **

    Permission service contains methods to interact with permissions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/base.v1.Permission/Check',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionCheckRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionCheckResponse.FromString,
                )
        self.Expand = channel.unary_unary(
                '/base.v1.Permission/Expand',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionExpandRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionExpandResponse.FromString,
                )
        self.LookupEntity = channel.unary_unary(
                '/base.v1.Permission/LookupEntity',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityResponse.FromString,
                )
        self.LookupEntityStream = channel.unary_stream(
                '/base.v1.Permission/LookupEntityStream',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityStreamResponse.FromString,
                )
        self.LookupSubject = channel.unary_unary(
                '/base.v1.Permission/LookupSubject',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionLookupSubjectRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupSubjectResponse.FromString,
                )
        self.SubjectPermission = channel.unary_unary(
                '/base.v1.Permission/SubjectPermission',
                request_serializer=base_dot_v1_dot_service__pb2.PermissionSubjectPermissionRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.PermissionSubjectPermissionResponse.FromString,
                )


class PermissionServicer(object):
    """** PERMISSION SERVICE **

    Permission service contains methods to interact with permissions.
    """

    def Check(self, request, context):
        """Check method receives a PermissionCheckRequest and returns a PermissionCheckResponse.
        It is used to determine whether a specific user has permission to perform an action on a resource.
        For example, "Can the user 1 push to repository 1?"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Expand(self, request, context):
        """Expand method receives a PermissionExpandRequest and returns a PermissionExpandResponse.
        It expands relationships according to the schema provided.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupEntity(self, request, context):
        """LookupEntity method receives a PermissionLookupEntityRequest and returns a PermissionLookupEntityResponse.
        It is used to retrieve an entity by its identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupEntityStream(self, request, context):
        """LookupEntityStream method receives a PermissionLookupEntityRequest and streams a series of PermissionLookupEntityStreamResponse messages.
        It is used to retrieve entities by their identifiers in a streaming fashion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupSubject(self, request, context):
        """LookupSubject method receives a PermissionLookupSubjectRequest and returns a PermissionLookupSubjectResponse.
        It is used to retrieve a subject by its identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubjectPermission(self, request, context):
        """SubjectPermission method receives a PermissionSubjectPermissionRequest and returns a PermissionSubjectPermissionResponse.
        It is used to retrieve permissions related to a specific subject.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PermissionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionCheckRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionCheckResponse.SerializeToString,
            ),
            'Expand': grpc.unary_unary_rpc_method_handler(
                    servicer.Expand,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionExpandRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionExpandResponse.SerializeToString,
            ),
            'LookupEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupEntity,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityResponse.SerializeToString,
            ),
            'LookupEntityStream': grpc.unary_stream_rpc_method_handler(
                    servicer.LookupEntityStream,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionLookupEntityStreamResponse.SerializeToString,
            ),
            'LookupSubject': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupSubject,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionLookupSubjectRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionLookupSubjectResponse.SerializeToString,
            ),
            'SubjectPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.SubjectPermission,
                    request_deserializer=base_dot_v1_dot_service__pb2.PermissionSubjectPermissionRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.PermissionSubjectPermissionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Permission', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Permission(object):
    """** PERMISSION SERVICE **

    Permission service contains methods to interact with permissions.
    """

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Permission/Check',
            base_dot_v1_dot_service__pb2.PermissionCheckRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Expand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Permission/Expand',
            base_dot_v1_dot_service__pb2.PermissionExpandRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionExpandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Permission/LookupEntity',
            base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionLookupEntityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupEntityStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/base.v1.Permission/LookupEntityStream',
            base_dot_v1_dot_service__pb2.PermissionLookupEntityRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionLookupEntityStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupSubject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Permission/LookupSubject',
            base_dot_v1_dot_service__pb2.PermissionLookupSubjectRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionLookupSubjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubjectPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Permission/SubjectPermission',
            base_dot_v1_dot_service__pb2.PermissionSubjectPermissionRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.PermissionSubjectPermissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WatchStub(object):
    """** WATCH SERVICE **

    Watch service provides a streaming RPC that can be used to watch changes in the data.

    Watch is the main RPC in the Watch service. It establishes a stream between
    the client and the server. The server pushes data changes into this stream
    and the client can read those in real time.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Watch = channel.unary_stream(
                '/base.v1.Watch/Watch',
                request_serializer=base_dot_v1_dot_service__pb2.WatchRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.WatchResponse.FromString,
                )


class WatchServicer(object):
    """** WATCH SERVICE **

    Watch service provides a streaming RPC that can be used to watch changes in the data.

    Watch is the main RPC in the Watch service. It establishes a stream between
    the client and the server. The server pushes data changes into this stream
    and the client can read those in real time.
    """

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WatchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=base_dot_v1_dot_service__pb2.WatchRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.WatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Watch', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Watch(object):
    """** WATCH SERVICE **

    Watch service provides a streaming RPC that can be used to watch changes in the data.

    Watch is the main RPC in the Watch service. It establishes a stream between
    the client and the server. The server pushes data changes into this stream
    and the client can read those in real time.
    """

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/base.v1.Watch/Watch',
            base_dot_v1_dot_service__pb2.WatchRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.WatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SchemaStub(object):
    """** SCHEMA SERVICE **

    Schema service provides methods to manage the authorization model of your application.
    It allows you to read and write the schema of your authorization model.

    The Schema service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/base.v1.Schema/Write',
                request_serializer=base_dot_v1_dot_service__pb2.SchemaWriteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.SchemaWriteResponse.FromString,
                )
        self.PartialWrite = channel.unary_unary(
                '/base.v1.Schema/PartialWrite',
                request_serializer=base_dot_v1_dot_service__pb2.SchemaPartialWriteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.SchemaPartialWriteResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/base.v1.Schema/Read',
                request_serializer=base_dot_v1_dot_service__pb2.SchemaReadRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.SchemaReadResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/base.v1.Schema/List',
                request_serializer=base_dot_v1_dot_service__pb2.SchemaListRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.SchemaListResponse.FromString,
                )


class SchemaServicer(object):
    """** SCHEMA SERVICE **

    Schema service provides methods to manage the authorization model of your application.
    It allows you to read and write the schema of your authorization model.

    The Schema service definition.
    """

    def Write(self, request, context):
        """Write is an RPC that allows you to write your authorization model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartialWrite(self, request, context):
        """PartialWrite is an RPC that allows you to partially update an existing authorization model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Read is an RPC that allows you to read your authorization model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """List is an RPC that allows you to list all authorization models.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchemaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=base_dot_v1_dot_service__pb2.SchemaWriteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.SchemaWriteResponse.SerializeToString,
            ),
            'PartialWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.PartialWrite,
                    request_deserializer=base_dot_v1_dot_service__pb2.SchemaPartialWriteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.SchemaPartialWriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=base_dot_v1_dot_service__pb2.SchemaReadRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.SchemaReadResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=base_dot_v1_dot_service__pb2.SchemaListRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.SchemaListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Schema', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Schema(object):
    """** SCHEMA SERVICE **

    Schema service provides methods to manage the authorization model of your application.
    It allows you to read and write the schema of your authorization model.

    The Schema service definition.
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Schema/Write',
            base_dot_v1_dot_service__pb2.SchemaWriteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.SchemaWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PartialWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Schema/PartialWrite',
            base_dot_v1_dot_service__pb2.SchemaPartialWriteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.SchemaPartialWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Schema/Read',
            base_dot_v1_dot_service__pb2.SchemaReadRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.SchemaReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Schema/List',
            base_dot_v1_dot_service__pb2.SchemaListRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.SchemaListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataStub(object):
    """** DATA SERVICE **

    The Data service provides RPC methods for managing data in the context of relationships and attributes.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/base.v1.Data/Write',
                request_serializer=base_dot_v1_dot_service__pb2.DataWriteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.DataWriteResponse.FromString,
                )
        self.WriteRelationships = channel.unary_unary(
                '/base.v1.Data/WriteRelationships',
                request_serializer=base_dot_v1_dot_service__pb2.RelationshipWriteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.RelationshipWriteResponse.FromString,
                )
        self.ReadRelationships = channel.unary_unary(
                '/base.v1.Data/ReadRelationships',
                request_serializer=base_dot_v1_dot_service__pb2.RelationshipReadRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.RelationshipReadResponse.FromString,
                )
        self.ReadAttributes = channel.unary_unary(
                '/base.v1.Data/ReadAttributes',
                request_serializer=base_dot_v1_dot_service__pb2.AttributeReadRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.AttributeReadResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/base.v1.Data/Delete',
                request_serializer=base_dot_v1_dot_service__pb2.DataDeleteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.DataDeleteResponse.FromString,
                )
        self.DeleteRelationships = channel.unary_unary(
                '/base.v1.Data/DeleteRelationships',
                request_serializer=base_dot_v1_dot_service__pb2.RelationshipDeleteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.RelationshipDeleteResponse.FromString,
                )
        self.RunBundle = channel.unary_unary(
                '/base.v1.Data/RunBundle',
                request_serializer=base_dot_v1_dot_service__pb2.BundleRunRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.BundleRunResponse.FromString,
                )


class DataServicer(object):
    """** DATA SERVICE **

    The Data service provides RPC methods for managing data in the context of relationships and attributes.
    """

    def Write(self, request, context):
        """The Write RPC method creates a new relation tuple.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRelationships(self, request, context):
        """RPC method to write relationships for a tenant. This can be accessed via a POST request to the given HTTP path. It's tagged under "Data" in OpenAPI documentation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRelationships(self, request, context):
        """The ReadRelationships RPC method reads relation tuple(s).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAttributes(self, request, context):
        """The ReadAttributes RPC method reads attribute(s) of a relation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """The Delete RPC method deletes a relation tuple.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRelationships(self, request, context):
        """RPC method to delete relationships for a tenant, accessed via a POST request to the specified path, tagged as "Data" in OpenAPI documentation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunBundle(self, request, context):
        """Executes or runs a specific bundle. This method is useful for processing or triggering actions based on the bundle's data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=base_dot_v1_dot_service__pb2.DataWriteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.DataWriteResponse.SerializeToString,
            ),
            'WriteRelationships': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRelationships,
                    request_deserializer=base_dot_v1_dot_service__pb2.RelationshipWriteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.RelationshipWriteResponse.SerializeToString,
            ),
            'ReadRelationships': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRelationships,
                    request_deserializer=base_dot_v1_dot_service__pb2.RelationshipReadRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.RelationshipReadResponse.SerializeToString,
            ),
            'ReadAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAttributes,
                    request_deserializer=base_dot_v1_dot_service__pb2.AttributeReadRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.AttributeReadResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=base_dot_v1_dot_service__pb2.DataDeleteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.DataDeleteResponse.SerializeToString,
            ),
            'DeleteRelationships': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRelationships,
                    request_deserializer=base_dot_v1_dot_service__pb2.RelationshipDeleteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.RelationshipDeleteResponse.SerializeToString,
            ),
            'RunBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.RunBundle,
                    request_deserializer=base_dot_v1_dot_service__pb2.BundleRunRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.BundleRunResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Data', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Data(object):
    """** DATA SERVICE **

    The Data service provides RPC methods for managing data in the context of relationships and attributes.
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/Write',
            base_dot_v1_dot_service__pb2.DataWriteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.DataWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteRelationships(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/WriteRelationships',
            base_dot_v1_dot_service__pb2.RelationshipWriteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.RelationshipWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadRelationships(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/ReadRelationships',
            base_dot_v1_dot_service__pb2.RelationshipReadRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.RelationshipReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/ReadAttributes',
            base_dot_v1_dot_service__pb2.AttributeReadRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.AttributeReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/Delete',
            base_dot_v1_dot_service__pb2.DataDeleteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.DataDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRelationships(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/DeleteRelationships',
            base_dot_v1_dot_service__pb2.RelationshipDeleteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.RelationshipDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Data/RunBundle',
            base_dot_v1_dot_service__pb2.BundleRunRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.BundleRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BundleStub(object):
    """** BUNDLE SERVICE **

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/base.v1.Bundle/Write',
                request_serializer=base_dot_v1_dot_service__pb2.BundleWriteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.BundleWriteResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/base.v1.Bundle/Read',
                request_serializer=base_dot_v1_dot_service__pb2.BundleReadRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.BundleReadResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/base.v1.Bundle/Delete',
                request_serializer=base_dot_v1_dot_service__pb2.BundleDeleteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.BundleDeleteResponse.FromString,
                )


class BundleServicer(object):
    """** BUNDLE SERVICE **

    """

    def Write(self, request, context):
        """Writes a bundle of data for a specific operation. This is a general purpose method to handle writing data bundles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Reads a data bundle based on a specified request. This method is tailored for retrieving data bundles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Deletes a specific data bundle. This method is used to remove existing bundles from the system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BundleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=base_dot_v1_dot_service__pb2.BundleWriteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.BundleWriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=base_dot_v1_dot_service__pb2.BundleReadRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.BundleReadResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=base_dot_v1_dot_service__pb2.BundleDeleteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.BundleDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Bundle', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bundle(object):
    """** BUNDLE SERVICE **

    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Bundle/Write',
            base_dot_v1_dot_service__pb2.BundleWriteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.BundleWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Bundle/Read',
            base_dot_v1_dot_service__pb2.BundleReadRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.BundleReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Bundle/Delete',
            base_dot_v1_dot_service__pb2.BundleDeleteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.BundleDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TenancyStub(object):
    """** TENANCY SERVICE **
    The Tenancy service defines the gRPC methods for managing tenants.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/base.v1.Tenancy/Create',
                request_serializer=base_dot_v1_dot_service__pb2.TenantCreateRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.TenantCreateResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/base.v1.Tenancy/Delete',
                request_serializer=base_dot_v1_dot_service__pb2.TenantDeleteRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.TenantDeleteResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/base.v1.Tenancy/List',
                request_serializer=base_dot_v1_dot_service__pb2.TenantListRequest.SerializeToString,
                response_deserializer=base_dot_v1_dot_service__pb2.TenantListResponse.FromString,
                )


class TenancyServicer(object):
    """** TENANCY SERVICE **
    The Tenancy service defines the gRPC methods for managing tenants.

    """

    def Create(self, request, context):
        """Create is a unary RPC to create a new tenant.
        It requires a TenantCreateRequest and returns a TenantCreateResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete is a unary RPC to delete an existing tenant.
        It requires a TenantDeleteRequest and returns a TenantDeleteResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """List is a unary RPC to get a list of all tenants.
        It requires a TenantListRequest and returns a TenantListResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TenancyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=base_dot_v1_dot_service__pb2.TenantCreateRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.TenantCreateResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=base_dot_v1_dot_service__pb2.TenantDeleteRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.TenantDeleteResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=base_dot_v1_dot_service__pb2.TenantListRequest.FromString,
                    response_serializer=base_dot_v1_dot_service__pb2.TenantListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.v1.Tenancy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tenancy(object):
    """** TENANCY SERVICE **
    The Tenancy service defines the gRPC methods for managing tenants.

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Tenancy/Create',
            base_dot_v1_dot_service__pb2.TenantCreateRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.TenantCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Tenancy/Delete',
            base_dot_v1_dot_service__pb2.TenantDeleteRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.TenantDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.v1.Tenancy/List',
            base_dot_v1_dot_service__pb2.TenantListRequest.SerializeToString,
            base_dot_v1_dot_service__pb2.TenantListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
