# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: base/v1/service.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from base.v1 import base_pb2 as base_dot_v1_dot_base__pb2
from validate import validate_pb2 as validate_dot_validate__pb2
from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x15\x62\x61se/v1/service.proto\x12\x07\x62\x61se.v1\x1a\x12\x62\x61se/v1/base.proto\x1a\x17validate/validate.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\x80\x07\n\x16PermissionCheckRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12M\n\x08metadata\x18\x02 \x01(\x0b\x32\'.base.v1.PermissionCheckRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x44\n\x06\x65ntity\x18\x03 \x01(\x0b\x32\x0f.base.v1.EntityB\x1b\x92\x41\x10J\x0e\"repository:1\"\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x65ntity\x12v\n\npermission\x18\x04 \x01(\tBV\x92\x41\x36\x32\x34The action the user wants to perform on the resource\xfa\x42\x1ar\x18(@2\x11^[a-zA-Z_]{1,64}$\xd0\x01\x00R\npermission\x12\x34\n\x07subject\x18\x05 \x01(\x0b\x32\x10.base.v1.SubjectB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x07subject\x12\xc4\x01\n\x07\x63ontext\x18\x06 \x01(\x0b\x32\x10.base.v1.ContextB\x97\x01\x92\x41\x93\x01\x32\x90\x01\x43ontextual data that can be dynamically added to permission check requests. See details on [Contextual Data](../../operations/contextual-tuples)R\x07\x63ontext\x12/\n\targuments\x18\x07 \x03(\x0b\x32\x11.base.v1.ArgumentR\targuments\"\xb2\x02\n\x1ePermissionCheckRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x89\x01\n\nsnap_token\x18\x02 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\x12\\\n\x05\x64\x65pth\x18\x03 \x01(\x05\x42\x46\x92\x41<2:Query limit when if recursive database queries got in loop\xfa\x42\x04\x1a\x02(\x03R\x05\x64\x65pth\"\x87\x01\n\x17PermissionCheckResponse\x12&\n\x03\x63\x61n\x18\x01 \x01(\x0e\x32\x14.base.v1.CheckResultR\x03\x63\x61n\x12\x44\n\x08metadata\x18\x02 \x01(\x0b\x32(.base.v1.PermissionCheckResponseMetadataR\x08metadata\"C\n\x1fPermissionCheckResponseMetadata\x12 \n\x0b\x63heck_count\x18\x01 \x01(\x05R\x0b\x63heck_count\"\xe5\x04\n\x17PermissionExpandRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12N\n\x08metadata\x18\x02 \x01(\x0b\x32(.base.v1.PermissionExpandRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x31\n\x06\x65ntity\x18\x03 \x01(\x0b\x32\x0f.base.v1.EntityB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x65ntity\x12=\n\npermission\x18\x04 \x01(\tB\x1d\xfa\x42\x1ar\x18(@2\x11^[a-zA-Z_]{1,64}$\xd0\x01\x01R\npermission\x12*\n\x07\x63ontext\x18\x05 \x01(\x0b\x32\x10.base.v1.ContextR\x07\x63ontext\x12/\n\targuments\x18\x06 \x03(\x0b\x32\x11.base.v1.ArgumentR\targuments\"\xd6\x01\n\x1fPermissionExpandRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\"?\n\x18PermissionExpandResponse\x12#\n\x04tree\x18\x01 \x01(\x0b\x32\x0f.base.v1.ExpandR\x04tree\"\x84\x05\n\x1dPermissionLookupEntityRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12T\n\x08metadata\x18\x02 \x01(\x0b\x32..base.v1.PermissionLookupEntityRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12?\n\x0b\x65ntity_type\x18\x03 \x01(\tB\x1d\xfa\x42\x1ar\x18(@2\x11^[a-zA-Z_]{1,64}$\xd0\x01\x00R\x0b\x65ntity_type\x12=\n\npermission\x18\x04 \x01(\tB\x1d\xfa\x42\x1ar\x18(@2\x11^[a-zA-Z_]{1,64}$\xd0\x01\x00R\npermission\x12\x34\n\x07subject\x18\x05 \x01(\x0b\x32\x10.base.v1.SubjectB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x07subject\x12*\n\x07\x63ontext\x18\x06 \x01(\x0b\x32\x10.base.v1.ContextR\x07\x63ontext\"\xbb\x02\n%PermissionLookupEntityRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\x12]\n\x05\x64\x65pth\x18\x03 \x01(\x05\x42G\x92\x41=2;Query limit when if recursive database queries got in loop.\xfa\x42\x04\x1a\x02(\x03R\x05\x64\x65pth\"@\n\x1ePermissionLookupEntityResponse\x12\x1e\n\nentity_ids\x18\x01 \x03(\tR\nentity_ids\"D\n$PermissionLookupEntityStreamResponse\x12\x1c\n\tentity_id\x18\x01 \x01(\tR\tentity_id\"\xc2\x04\n\x1dPermissionEntityFilterRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12T\n\x08metadata\x18\x02 \x01(\x0b\x32..base.v1.PermissionEntityFilterRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x46\n\x10\x65ntity_reference\x18\x03 \x01(\x0b\x32\x1a.base.v1.RelationReferenceR\x10\x65ntity_reference\x12*\n\x07subject\x18\x04 \x01(\x0b\x32\x10.base.v1.SubjectR\x07subject\x12*\n\x07\x63ontext\x18\x05 \x01(\x0b\x32\x10.base.v1.ContextR\x07\x63ontext\"\xbb\x02\n%PermissionEntityFilterRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\x12]\n\x05\x64\x65pth\x18\x03 \x01(\x05\x42G\x92\x41=2;Query limit when if recursive database queries got in loop.\xfa\x42\x04\x1a\x02(\x03R\x05\x64\x65pth\"\x8c\x05\n\x1ePermissionLookupSubjectRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12U\n\x08metadata\x18\x02 \x01(\x0b\x32/.base.v1.PermissionLookupSubjectRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x31\n\x06\x65ntity\x18\x03 \x01(\x0b\x32\x0f.base.v1.EntityB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x65ntity\x12=\n\npermission\x18\x04 \x01(\tB\x1d\xfa\x42\x1ar\x18(@2\x11^[a-zA-Z_]{1,64}$\xd0\x01\x00R\npermission\x12H\n\x11subject_reference\x18\x05 \x01(\x0b\x32\x1a.base.v1.RelationReferenceR\x11subject_reference\x12*\n\x07\x63ontext\x18\x06 \x01(\x0b\x32\x10.base.v1.ContextR\x07\x63ontext\"\xbc\x02\n&PermissionLookupSubjectRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\x12]\n\x05\x64\x65pth\x18\x03 \x01(\x05\x42G\x92\x41=2;Query limit when if recursive database queries got in loop.\xfa\x42\x04\x1a\x02(\x03R\x05\x64\x65pth\"C\n\x1fPermissionLookupSubjectResponse\x12 \n\x0bsubject_ids\x18\x01 \x03(\tR\x0bsubject_ids\"\xc1\x04\n\"PermissionSubjectPermissionRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12Y\n\x08metadata\x18\x02 \x01(\x0b\x32\x33.base.v1.PermissionSubjectPermissionRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x31\n\x06\x65ntity\x18\x03 \x01(\x0b\x32\x0f.base.v1.EntityB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x65ntity\x12\x34\n\x07subject\x18\x04 \x01(\x0b\x32\x10.base.v1.SubjectB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x07subject\x12*\n\x07\x63ontext\x18\x05 \x01(\x0b\x32\x10.base.v1.ContextR\x07\x63ontext\"\xea\x02\n*PermissionSubjectPermissionRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\x12(\n\x0fonly_permission\x18\x03 \x01(\x08R\x0fonly_permission\x12]\n\x05\x64\x65pth\x18\x04 \x01(\x05\x42G\x92\x41=2;Query limit when if recursive database queries got in loop.\xfa\x42\x04\x1a\x02(\x03R\x05\x64\x65pth\"\xcc\x01\n#PermissionSubjectPermissionResponse\x12S\n\x07results\x18\x01 \x03(\x0b\x32\x39.base.v1.PermissionSubjectPermissionResponse.ResultsEntryR\x07results\x1aP\n\x0cResultsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12*\n\x05value\x18\x02 \x01(\x0e\x32\x14.base.v1.CheckResultR\x05value:\x02\x38\x01\"\xc8\x03\n\x0cWatchRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x8a\x01\n\nsnap_token\x18\x02 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\"?\n\rWatchResponse\x12.\n\x07\x63hanges\x18\x01 \x01(\x0b\x32\x14.base.v1.DataChangesR\x07\x63hanges\"\xd9\x02\n\x12SchemaWriteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x16\n\x06schema\x18\x02 \x01(\tR\x06schema\"=\n\x13SchemaWriteResponse\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"\xd9\x02\n\x19SchemaPartialWriteRequest\x12L\n\ttenant_id\x18\x01 \x01(\tB.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12P\n\x08metadata\x18\x02 \x01(\x0b\x32*.base.v1.SchemaPartialWriteRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12L\n\x08partials\x18\x03 \x03(\x0b\x32\x30.base.v1.SchemaPartialWriteRequest.PartialsEntryR\x08partials\x1aN\n\rPartialsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\'\n\x05value\x18\x02 \x01(\x0b\x32\x11.base.v1.PartialsR\x05value:\x02\x38\x01\"K\n!SchemaPartialWriteRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"D\n\x1aSchemaPartialWriteResponse\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"\x8a\x03\n\x11SchemaReadRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12H\n\x08metadata\x18\x02 \x01(\x0b\x32\".base.v1.SchemaReadRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\"C\n\x19SchemaReadRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"G\n\x12SchemaReadResponse\x12\x31\n\x06schema\x18\x01 \x01(\x0b\x32\x19.base.v1.SchemaDefinitionR\x06schema\"\xa1\x03\n\x11SchemaListRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12)\n\tpage_size\x18\x02 \x01(\rB\x0b\xfa\x42\x08*\x06\x18\x64(\x01@\x01R\tpage_size\x12\x34\n\x10\x63ontinuous_token\x18\x03 \x01(\tB\x08\xfa\x42\x05r\x03\xd0\x01\x01R\x10\x63ontinuous_token\"\x83\x01\n\x12SchemaListResponse\x12\x12\n\x04head\x18\x01 \x01(\tR\x04head\x12-\n\x07schemas\x18\x02 \x03(\x0b\x32\x13.base.v1.SchemaListR\x07schemas\x12*\n\x10\x63ontinuous_token\x18\x03 \x01(\tR\x10\x63ontinuous_token\"F\n\nSchemaList\x12\x18\n\x07version\x18\x01 \x01(\tR\x07version\x12\x1e\n\ncreated_at\x18\x02 \x01(\tR\ncreated_at\"\x8a\x04\n\x10\x44\x61taWriteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12G\n\x08metadata\x18\x02 \x01(\x0b\x32!.base.v1.DataWriteRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x39\n\x06tuples\x18\x03 \x03(\x0b\x32\x0e.base.v1.TupleB\x11\xfa\x42\x0e\x92\x01\x0b\x08\x00\x10\x64\"\x05\x8a\x01\x02\x10\x01R\x06tuples\x12\x45\n\nattributes\x18\x04 \x03(\x0b\x32\x12.base.v1.AttributeB\x11\xfa\x42\x0e\x92\x01\x0b\x08\x00\x10\x64\"\x05\x8a\x01\x02\x10\x01R\nattributes\"B\n\x18\x44\x61taWriteRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"\xa0\x01\n\x11\x44\x61taWriteResponse\x12\x8a\x01\n\nsnap_token\x18\x01 \x01(\tBj\x92\x41g2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).R\nsnap_token\"\xd3\x03\n\x18RelationshipWriteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12O\n\x08metadata\x18\x02 \x01(\x0b\x32).base.v1.RelationshipWriteRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x39\n\x06tuples\x18\x03 \x03(\x0b\x32\x0e.base.v1.TupleB\x11\xfa\x42\x0e\x92\x01\x0b\x08\x01\x10\x64\"\x05\x8a\x01\x02\x10\x01R\x06tuples\"J\n RelationshipWriteRequestMetadata\x12&\n\x0eschema_version\x18\x01 \x01(\tR\x0eschema_version\"\xa7\x01\n\x19RelationshipWriteResponse\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"\xaf\x04\n\x17RelationshipReadRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12N\n\x08metadata\x18\x02 \x01(\x0b\x32(.base.v1.RelationshipReadRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12\x36\n\x06\x66ilter\x18\x03 \x01(\x0b\x32\x14.base.v1.TupleFilterB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x66ilter\x12)\n\tpage_size\x18\x04 \x01(\rB\x0b\xfa\x42\x08*\x06\x18\x64(\x01@\x01R\tpage_size\x12\x34\n\x10\x63ontinuous_token\x18\x05 \x01(\tB\x08\xfa\x42\x05r\x03\xd0\x01\x01R\x10\x63ontinuous_token\"\xad\x01\n\x1fRelationshipReadRequestMetadata\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"n\n\x18RelationshipReadResponse\x12&\n\x06tuples\x18\x01 \x03(\x0b\x32\x0e.base.v1.TupleR\x06tuples\x12*\n\x10\x63ontinuous_token\x18\x02 \x01(\tR\x10\x63ontinuous_token\"\xad\x04\n\x14\x41ttributeReadRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12K\n\x08metadata\x18\x02 \x01(\x0b\x32%.base.v1.AttributeReadRequestMetadataB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x08metadata\x12:\n\x06\x66ilter\x18\x03 \x01(\x0b\x32\x18.base.v1.AttributeFilterB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x06\x66ilter\x12)\n\tpage_size\x18\x04 \x01(\rB\x0b\xfa\x42\x08*\x06\x18\x64(\x01@\x01R\tpage_size\x12\x34\n\x10\x63ontinuous_token\x18\x05 \x01(\tB\x08\xfa\x42\x05r\x03\xd0\x01\x01R\x10\x63ontinuous_token\"\xaa\x01\n\x1c\x41ttributeReadRequestMetadata\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"w\n\x15\x41ttributeReadResponse\x12\x32\n\nattributes\x18\x01 \x03(\x0b\x32\x12.base.v1.AttributeR\nattributes\x12*\n\x10\x63ontinuous_token\x18\x02 \x01(\tR\x10\x63ontinuous_token\"\xd4\x03\n\x11\x44\x61taDeleteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x42\n\x0ctuple_filter\x18\x02 \x01(\x0b\x32\x14.base.v1.TupleFilterB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x0ctuple_filter\x12N\n\x10\x61ttribute_filter\x18\x03 \x01(\x0b\x32\x18.base.v1.AttributeFilterB\x08\xfa\x42\x05\x8a\x01\x02\x10\x01R\x10\x61ttribute_filter\"\xa0\x01\n\x12\x44\x61taDeleteResponse\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"\xf6\x02\n\x19RelationshipDeleteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12,\n\x06\x66ilter\x18\x02 \x01(\x0b\x32\x14.base.v1.TupleFilterR\x06\x66ilter\"\xa8\x01\n\x1aRelationshipDeleteResponse\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"\xd9\x03\n\x10\x42undleRunRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x12\n\x04name\x18\x02 \x01(\tR\x04name\x12\x46\n\targuments\x18\x03 \x03(\x0b\x32(.base.v1.BundleRunRequest.ArgumentsEntryR\targuments\x1a<\n\x0e\x41rgumentsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\"\x9f\x01\n\x11\x42undleRunResponse\x12\x89\x01\n\nsnap_token\x18\x01 \x01(\tBi\x92\x41\x66\x32\x64The snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)R\nsnap_token\"\xf0\x02\n\x12\x42undleWriteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12-\n\x07\x62undles\x18\x02 \x03(\x0b\x32\x13.base.v1.DataBundleR\x07\x62undles\"+\n\x13\x42undleWriteResponse\x12\x14\n\x05names\x18\x01 \x03(\tR\x05names\"\xd4\x02\n\x11\x42undleReadRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x12\n\x04name\x18\x02 \x01(\tR\x04name\"A\n\x12\x42undleReadResponse\x12+\n\x06\x62undle\x18\x01 \x01(\x0b\x32\x13.base.v1.DataBundleR\x06\x62undle\"\xd6\x02\n\x13\x42undleDeleteRequest\x12\xaa\x02\n\ttenant_id\x18\x01 \x01(\tB\x8b\x02\x92\x41\xd9\x01\x32\xd6\x01Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\xe2\x80\x9c[a-zA-Z0-9-,]+\\\xe2\x80\x9c, max 64 bytes.\xfa\x42+r)(\x80\x01\x32!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\xd0\x01\x00R\ttenant_id\x12\x12\n\x04name\x18\x02 \x01(\tR\x04name\"*\n\x14\x42undleDeleteResponse\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\"a\n\x13TenantCreateRequest\x12*\n\x02id\x18\x01 \x01(\tB\x1a\xfa\x42\x17r\x15(@2\x0e[a-zA-Z0-9-,]+\xd0\x01\x00R\x02id\x12\x1e\n\x04name\x18\x02 \x01(\tB\n\xfa\x42\x07r\x05(@\xd0\x01\x00R\x04name\"?\n\x14TenantCreateResponse\x12\'\n\x06tenant\x18\x01 \x01(\x0b\x32\x0f.base.v1.TenantR\x06tenant\"/\n\x13TenantDeleteRequest\x12\x18\n\x02id\x18\x01 \x01(\tB\x08\xfa\x42\x05r\x03\xd0\x01\x00R\x02id\"?\n\x14TenantDeleteResponse\x12\'\n\x06tenant\x18\x01 \x01(\x0b\x32\x0f.base.v1.TenantR\x06tenant\"t\n\x11TenantListRequest\x12)\n\tpage_size\x18\x01 \x01(\rB\x0b\xfa\x42\x08*\x06\x18\x64(\x01@\x01R\tpage_size\x12\x34\n\x10\x63ontinuous_token\x18\x02 \x01(\tB\x08\xfa\x42\x05r\x03\xd0\x01\x01R\x10\x63ontinuous_token\"k\n\x12TenantListResponse\x12)\n\x07tenants\x18\x01 \x03(\x0b\x32\x0f.base.v1.TenantR\x07tenants\x12*\n\x10\x63ontinuous_token\x18\x02 \x01(\tR\x10\x63ontinuous_token2\xc0I\n\nPermission\x12\xfd\r\n\x05\x43heck\x12\x1f.base.v1.PermissionCheckRequest\x1a .base.v1.PermissionCheckResponse\"\xb0\r\x92\x41\xf8\x0c\n\nPermission\x12\tcheck api*\x11permissions.checkj\xcb\x0c\n\rx-codeSamples\x12\xb9\x0c\x32\xb6\x0c\n\xd5\x04*\xd2\x04\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xb2\x04\n\x06source\x12\xa7\x04\x1a\xa4\x04\x63r, err := client.Permission.Check(context.Background(), &v1.PermissionCheckRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionCheckRequestMetadata {\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n\n    if (cr.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        // RESULT_ALLOWED\n    } else {\n        // RESULT_DENIED\n    }\n})\n\x9b\x04*\x98\x04\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xee\x03\n\x06source\x12\xe3\x03\x1a\xe0\x03\x63lient.permission.check({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        console.log(\"RESULT_ALLOWED\")\n    } else {\n        console.log(\"RESULT_DENIED\")\n    }\n})\n\xbd\x03*\xba\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x96\x03\n\x06source\x12\x8b\x03\x1a\x88\x03\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/check\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}\'\x82\xd3\xe4\x93\x02.\")/v1/tenants/{tenant_id}/permissions/check:\x01*\x12\xb0\t\n\x06\x45xpand\x12 .base.v1.PermissionExpandRequest\x1a!.base.v1.PermissionExpandResponse\"\xe0\x08\x92\x41\xa7\x08\n\nPermission\x12\nexpand api*\x12permissions.expandj\xf8\x07\n\rx-codeSamples\x12\xe6\x07\x32\xe3\x07\n\xee\x02*\xeb\x02\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xcb\x02\n\x06source\x12\xc0\x02\x1a\xbd\x02\x63r, err: = client.Permission.Expand(context.Background(), &v1.PermissionExpandRequest{\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionExpandRequestMetadata{\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n    },\n    Entity: &v1.Entity{\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"push\",\n})\n\x89\x02*\x86\x02\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xdc\x01\n\x06source\x12\xd1\x01\x1a\xce\x01\x63lient.permission.expand({\n  tenantId: \"t1\",\n  metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\"\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"push\",\n})\n\xe3\x02*\xe0\x02\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xbc\x02\n\x06source\x12\xb1\x02\x1a\xae\x02\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/expand\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\": {\n    \"schema_version\": \"\",\n    \"snap_token\": \"\"\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"push\"\n}\'\x82\xd3\xe4\x93\x02/\"*/v1/tenants/{tenant_id}/permissions/expand:\x01*\x12\xb0\x0b\n\x0cLookupEntity\x12&.base.v1.PermissionLookupEntityRequest\x1a\'.base.v1.PermissionLookupEntityResponse\"\xce\n\x92\x41\x8e\n\n\nPermission\x12\rlookup entity*\x18permissions.lookupEntityj\xd6\t\n\rx-codeSamples\x12\xc4\t2\xc1\t\n\xae\x03*\xab\x03\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x8b\x03\n\x06source\x12\x80\x03\x1a\xfd\x02\x63r, err: = client.Permission.LookupEntity(context.Background(), & v1.PermissionLookupEntityRequest {\n    TenantId: \"t1\",\n    Metadata: & v1.PermissionLookupEntityRequestMetadata {\n        SnapToken: \"\"\n        SchemaVersion: \"\"\n        Depth: 20,\n    },\n    EntityType: \"document\",\n    Permission: \"edit\",\n    Subject: & v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    }\n})\n\xfa\x02*\xf7\x02\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xcd\x02\n\x06source\x12\xc2\x02\x1a\xbf\x02\x63lient.permission.lookupEntity({\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity_type: \"document\",\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    console.log(response.entity_ids)\n})\n\x90\x03*\x8d\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xe9\x02\n\x06source\x12\xde\x02\x1a\xdb\x02\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/lookup-entity\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity_type\": \"document\",\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\":\"user\",\n    \"id\":\"1\"\n  }\n}\'\x82\xd3\xe4\x93\x02\x36\"1/v1/tenants/{tenant_id}/permissions/lookup-entity:\x01*\x12\xf1\x0c\n\x12LookupEntityStream\x12&.base.v1.PermissionLookupEntityRequest\x1a-.base.v1.PermissionLookupEntityStreamResponse\"\x81\x0c\x92\x41\xba\x0b\n\nPermission\x12\x14lookup entity stream*\x1epermissions.lookupEntityStreamj\xf5\n\n\rx-codeSamples\x12\xe3\n2\xe0\n\n\xa1\x04*\x9e\x04\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xfe\x03\n\x06source\x12\xf3\x03\x1a\xf0\x03str, err: = client.Permission.LookupEntityStream(context.Background(), &v1.PermissionLookupEntityRequest {\n    Metadata: &v1.PermissionLookupEntityRequestMetadata {\n        SnapToken: \"\", \n        SchemaVersion: \"\" \n        Depth: 50,\n    },\n    EntityType: \"document\",\n    Permission: \"view\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n})\n\n// handle stream response\nfor {\n    res, err: = str.Recv()\n\n    if err == io.EOF {\n        break\n    }\n\n    // res.EntityId\n}\n\xb9\x06*\xb6\x06\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x8c\x06\n\x06source\x12\x81\x06\x1a\xfe\x05\x63onst permify = require(\"@permify/permify-node\");\nconst {PermissionLookupEntityStreamResponse} = require(\"@permify/permify-node/dist/src/grpc/generated/base/v1/service\");\n\nfunction main() {\n    const client = new permify.grpc.newClient({\n        endpoint: \"localhost:3478\",\n    })\n\n    let res = client.permission.lookupEntityStream({\n        metadata: {\n            snapToken: \"\",\n            schemaVersion: \"\",\n            depth: 20\n        },\n        entityType: \"document\",\n        permission: \"view\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    })\n\n    handle(res)\n}\n\nasync function handle(res: AsyncIterable<PermissionLookupEntityStreamResponse>) {\n    for await (const response of res) {\n        // response.entityId\n    }\n}\x82\xd3\xe4\x93\x02=\"8/v1/tenants/{tenant_id}/permissions/lookup-entity-stream:\x01*0\x01\x12\xda\x0c\n\rLookupSubject\x12\'.base.v1.PermissionLookupSubjectRequest\x1a(.base.v1.PermissionLookupSubjectResponse\"\xf5\x0b\x92\x41\xb4\x0b\n\nPermission\x12\x0elookup-subject*\x19permissions.lookupSubjectj\xfa\n\n\rx-codeSamples\x12\xe8\n2\xe5\n\n\xf4\x03*\xf1\x03\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xd1\x03\n\x06source\x12\xc6\x03\x1a\xc3\x03\x63r, err: = client.Permission.LookupSubject(context.Background(), &v1.PermissionLookupSubjectRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionLookupSubjectRequestMetadata{\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        Depth: 20,\n    },\n    Entity: &v1.Entity{\n        Type: \"document\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    SubjectReference: &v1.RelationReference{\n        Type: \"user\",\n        Relation: \"\",\n    }\n})\n\xae\x03*\xab\x03\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x81\x03\n\x06source\x12\xf6\x02\x1a\xf3\x02\x63lient.permission.lookupSubject({\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\"\n        depth: 20,\n    },\n    Entity: {\n        Type: \"document\",\n        Id: \"1\",\n    },\n    permission: \"edit\",\n    subject_reference: {\n        type: \"user\",\n        relation: \"\"\n    }\n}).then((response) => {\n    console.log(response.subject_ids)\n})\n\xba\x03*\xb7\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x93\x03\n\x06source\x12\x88\x03\x1a\x85\x03\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/lookup-subject\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\"\n    \"depth\": 20,\n  },\n  \"entity\": {\n    type: \"document\",\n    id: \"1\'\n  },\n  \"permission\": \"edit\",\n  \"subject_reference\": {\n    \"type\": \"user\",\n    \"relation\": \"\"\n  }\n}\'\x82\xd3\xe4\x93\x02\x37\"2/v1/tenants/{tenant_id}/permissions/lookup-subject:\x01*\x12\xfa\x0c\n\x11SubjectPermission\x12+.base.v1.PermissionSubjectPermissionRequest\x1a,.base.v1.PermissionSubjectPermissionResponse\"\x89\x0c\x92\x41\xc4\x0b\n\nPermission\x12\x12subject permission*\x1dpermissions.subjectPermissionj\x82\x0b\n\rx-codeSamples\x12\xf0\n2\xed\n\n\xf5\x03*\xf2\x03\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xd2\x03\n\x06source\x12\xc7\x03\x1a\xc4\x03\x63r, err: = client.Permission.SubjectPermission(context.Background(), &v1.PermissionSubjectPermissionRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionSubjectPermissionRequestMetadata {\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        OnlyPermission: false,\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n})\n\xa0\x03*\x9d\x03\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xf3\x02\n\x06source\x12\xe8\x02\x1a\xe5\x02\x63lient.permission.subjectPermission({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        onlyPermission: true,\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    console.log(response);\n})\n\xcf\x03*\xcc\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xa8\x03\n\x06source\x12\x9d\x03\x1a\x9a\x03\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/subject-permission\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"only_permission\": true,\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}\'\x82\xd3\xe4\x93\x02;\"6/v1/tenants/{tenant_id}/permissions/subject-permission:\x01*2\x83\x08\n\x05Watch\x12\xf9\x07\n\x05Watch\x12\x15.base.v1.WatchRequest\x1a\x16.base.v1.WatchResponse\"\xbe\x07\x92\x41\x92\x07\n\x05Watch\x12\rwatch changes*\x0bwatch.watchj\xec\x06\n\rx-codeSamples\x12\xda\x06\x32\xd7\x06\n\x9e\x02*\x9b\x02\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xfb\x01\n\x06source\x12\xf0\x01\x1a\xed\x01\x63r, err := client.Watch.Watch(context.Background(), &v1.WatchRequest{\n    TenantId:  \"t1\",\n    SnapToken: \"\",\n})\n// handle stream response\nfor {\n    res, err := cr.Recv()\n\n    if err == io.EOF {\n        break\n    }\n\n    // res.Changes\n}\n\n\xb3\x04*\xb0\x04\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x86\x04\n\x06source\x12\xfb\x03\x1a\xf8\x03\x63onst permify = require(\"@permify/permify-node\");\nconst {WatchResponse} = require(\"@permify/permify-node/dist/src/grpc/generated/base/v1/service\");\n\nfunction main() {\n    const client = new permify.grpc.newClient({\n        endpoint: \"localhost:3478\",\n    })\n\n    let res = client.watch.watch({\n          tenantId: \"t1\",\n        snapToken: \"\"\n    })\n\n    handle(res)\n}\n\nasync function handle(res: AsyncIterable<WatchResponse>) {\n    for await (const response of res) {\n        // response.changes\n    }\n}\n\x82\xd3\xe4\x93\x02\"\"\x1d/v1/tenants/{tenant_id}/watch:\x01*0\x01\x32\xe1\x1f\n\x06Schema\x12\x82\x11\n\x05Write\x12\x1b.base.v1.SchemaWriteRequest\x1a\x1c.base.v1.SchemaWriteResponse\"\xbd\x10\x92\x41\x89\x10\n\x06Schema\x12\x0cwrite schema*\rschemas.writej\xe1\x0f\n\rx-codeSamples\x12\xcf\x0f\x32\xcc\x0f\n\x8a\x05*\x87\x05\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xe7\x04\n\x06source\x12\xdc\x04\x1a\xd9\x04sr, err: = client.Schema.Write(context.Background(), &v1.SchemaWriteRequest {\n    TenantId: \"t1\",\n    Schema: `\n    \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n    }\"\n    `,\n})\n\x8a\x05*\x87\x05\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xdd\x04\n\x06source\x12\xd2\x04\x1a\xcf\x04\x63lient.schema.write({\n    tenantId: \"t1\",\n    schema: `\n    \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n    }\"\n    `\n}).then((response) => {\n    // handle response\n})\n\xaf\x05*\xac\x05\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x88\x05\n\x06source\x12\xfd\x04\x1a\xfa\x04\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"schema\": \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n }\"\n}\'\x82\xd3\xe4\x93\x02*\"%/v1/tenants/{tenant_id}/schemas/write:\x01*\x12\xdf\x01\n\x0cPartialWrite\x12\".base.v1.SchemaPartialWriteRequest\x1a#.base.v1.SchemaPartialWriteResponse\"\x85\x01\x92\x41J\n\x06Schema\x12)partially update your authorization model*\x15schemas.partial-write\x82\xd3\xe4\x93\x02\x32\x32-/v1/tenants/{tenant_id}/schemas/partial-write:\x01*\x12\xf5\x06\n\x04Read\x12\x1a.base.v1.SchemaReadRequest\x1a\x1b.base.v1.SchemaReadResponse\"\xb3\x06\x92\x41\x80\x06\n\x06Schema\x12\x0bread schema*\x0cschemas.readj\xda\x05\n\rx-codeSamples\x12\xc8\x05\x32\xc5\x05\n\xf6\x01*\xf3\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xd3\x01\n\x06source\x12\xc8\x01\x1a\xc5\x01sr, err: = client.Schema.Read(context.Background(), &v1.SchemaReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.SchemaReadRequestMetadata{\n        SchemaVersion: \"cnbe6se5fmal18gpc66g\",\n    },\n})\n\xb6\x01*\xb3\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x89\x01\n\x06source\x12\x7f\x1a}let res = client.schema.read({\n    tenantId: \"t1\",\n    metadata: {\n    schemaVersion: swResponse.schemaVersion,\n    },\n    })\n\x90\x02*\x8d\x02\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xe9\x01\n\x06source\x12\xde\x01\x1a\xdb\x01\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"metadata\": {\n        \"schema_version\": \"cnbe6se5fmal18gpc66g\"\n    }\n}\'\x82\xd3\xe4\x93\x02)\"$/v1/tenants/{tenant_id}/schemas/read:\x01*\x12\xf7\x05\n\x04List\x12\x1a.base.v1.SchemaListRequest\x1a\x1b.base.v1.SchemaListResponse\"\xb5\x05\x92\x41\x82\x05\n\x06Schema\x12\x0blist schema*\x0cschemas.listj\xdc\x04\n\rx-codeSamples\x12\xca\x04\x32\xc7\x04\n\xc0\x01*\xbd\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x9d\x01\n\x06source\x12\x92\x01\x1a\x8f\x01sr, err: = client.Schema.List(context.Background(), &v1.SchemaListRequest {\n    TenantId: \"t1\",\n    PageSize: \"10\",\n    ContinuousToken: \"\",\n})\n\x85\x01*\x82\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\nY\n\x06source\x12O\x1aMlet res = client.schema.list({\n    tenantId: \"t1\",\n    continuousToken: \"\"\n})\n\xf9\x01*\xf6\x01\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xd2\x01\n\x06source\x12\xc7\x01\x1a\xc4\x01\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"page_size\": \"10\",\n    \"continuous_token\": \"\"\n}\'\x82\xd3\xe4\x93\x02)\"$/v1/tenants/{tenant_id}/schemas/list:\x01*2\xe3\x43\n\x04\x44\x61ta\x12\x8d\x15\n\x05Write\x12\x19.base.v1.DataWriteRequest\x1a\x1a.base.v1.DataWriteResponse\"\xcc\x14\x92\x41\x9b\x14\n\x04\x44\x61ta\x12\nwrite data*\ndata.writej\xfa\x13\n\rx-codeSamples\x12\xe8\x13\x32\xe5\x13\n\xbb\x07*\xb8\x07\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x98\x07\n\x06source\x12\x8d\x07\x1a\x8a\x07// Convert the wrapped attribute value into Any proto message\nvalue, err := anypb.New(&v1.BooleanValue{\n    Data: true,\n})\nif err != nil {\n    // Handle error\n}\n\ncr, err := client.Data.Write(context.Background(), &v1.DataWriteRequest{\n    TenantId: \"t1\",,\n    Metadata: &v1.DataWriteRequestMetadata{\n        SchemaVersion: \"\",\n    },\n    Tuples: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Relation: \"editor\",\n            Subject:  &v1.Subject{\n                Type: \"user\",\n                Id:   \"1\",\n                Relation: \"\",\n            },\n        },\n    },\n    Attributes: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Attribute: \"is_private\",\n            Value:     value,\n        },\n    },\n})\n\x80\x06*\xfd\x05\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xd3\x05\n\x06source\x12\xc8\x05\x1a\xc5\x05\x63onst booleanValue = BooleanValue.fromJSON({ data: true });\n\nconst value = Any.fromJSON({\n    typeUrl: \'type.googleapis.com/base.v1.BooleanValue\',\n    value: BooleanValue.encode(booleanValue).finish()\n});\n\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        relation: \"editor\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    }],\n    attributes: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        attribute: \"is_private\",\n        value: value,\n    }]\n}).then((response) => {\n    // handle response\n})\n\xa1\x06*\x9e\x06\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xfa\x05\n\x06source\x12\xef\x05\x1a\xec\x05\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n      {\n        \"entity\": {\n          \"type\": \"document\",\n          \"id\": \"1\"\n        },\n        \"relation\": \"editor\",\n        \"subject\": {\n          \"type\": \"user\",\n          \"id\": \"1\"\n        }\n    }\n    ],\n    \"attributes\": [\n        {\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": {\n                \"@type\": \"type.googleapis.com/base.v1.BooleanValue\",\n                \"data\": true\n            }\n        }\n    ]\n}\n}\'\x82\xd3\xe4\x93\x02\'\"\"/v1/tenants/{tenant_id}/data/write:\x01*\x12\xc6\x01\n\x12WriteRelationships\x12!.base.v1.RelationshipWriteRequest\x1a\".base.v1.RelationshipWriteResponse\"i\x92\x41\x30\n\x04\x44\x61ta\x12\x13write relationships*\x13relationships.write\x82\xd3\xe4\x93\x02\x30\"+/v1/tenants/{tenant_id}/relationships/write:\x01*\x12\xb5\x0c\n\x11ReadRelationships\x12 .base.v1.RelationshipReadRequest\x1a!.base.v1.RelationshipReadResponse\"\xda\x0b\x92\x41\x9c\x0b\n\x04\x44\x61ta\x12\x12read relationships*\x17\x64\x61ta.relationships.readj\xe6\n\n\rx-codeSamples\x12\xd4\n2\xd1\n\n\x86\x04*\x83\x04\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xe3\x03\n\x06source\x12\xd8\x03\x1a\xd5\x03rr, err: = client.Data.ReadRelationships(context.Background(), & v1.Data.RelationshipReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.Data.RelationshipReadRequestMetadata {\n        SnapToken: \"\"\n    },\n    Filter: &v1.TupleFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Relation: \"member\",\n    Subject: &v1.SubjectFilter {\n        Type: \"\",\n        Id: []string {\"\"},\n        Relation: \"\"\n    }}\n})\n\x87\x03*\x84\x03\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xda\x02\n\x06source\x12\xcf\x02\x1a\xcc\x02\x63lient.data.readRelationships({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"member\",\n    subject: {\n      type: \"\",\n      ids: [],\n      relation: \"\"\n    }\n  }\n}).then((response) => {\n    // handle response\n})\n\xbb\x03*\xb8\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x94\x03\n\x06source\x12\x89\x03\x1a\x86\x03\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/relationships/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"member\",\n    subject: {\n      type: \"\",\n      ids: [],\n      relation: \"\"\n    }\n  }\n}\'\x82\xd3\xe4\x93\x02\x34\"//v1/tenants/{tenant_id}/data/relationships/read:\x01*\x12\xd6\n\n\x0eReadAttributes\x12\x1d.base.v1.AttributeReadRequest\x1a\x1e.base.v1.AttributeReadResponse\"\x84\n\x92\x41\xc9\t\n\x04\x44\x61ta\x12\x0fread attributes*\x14\x64\x61ta.attributes.readj\x99\t\n\rx-codeSamples\x12\x87\t2\x84\t\n\xa5\x03*\xa2\x03\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x82\x03\n\x06source\x12\xf7\x02\x1a\xf4\x02rr, err: = client.Data.ReadAttributes(context.Background(), & v1.Data.AttributeReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.Data.AttributeReadRequestMetadata {\n        SnapToken: \"\"\n    },\n    Filter: &v1.AttributeFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Attributes: []string {\"private\"},\n})\n\xd0\x02*\xcd\x02\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xa3\x02\n\x06source\x12\x98\x02\x1a\x95\x02\x63lient.data.readAttributes({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    attributes: [\n        \"private\"\n    ],\n  }\n}).then((response) => {\n    // handle response\n})\n\x86\x03*\x83\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xdf\x02\n\x06source\x12\xd4\x02\x1a\xd1\x02\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/attributes/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    attributes: [\n        \"private\"\n      ],\n  }\n}\'\x82\xd3\xe4\x93\x02\x31\",/v1/tenants/{tenant_id}/data/attributes/read:\x01*\x12\xf1\x0b\n\x06\x44\x65lete\x12\x1a.base.v1.DataDeleteRequest\x1a\x1b.base.v1.DataDeleteResponse\"\xad\x0b\x92\x41\xfb\n\n\x04\x44\x61ta\x12\x0b\x64\x65lete data*\x0b\x64\x61ta.deletej\xd8\n\n\rx-codeSamples\x12\xc6\n2\xc3\n\n\xee\x03*\xeb\x03\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xcb\x03\n\x06source\x12\xc0\x03\x1a\xbd\x03rr, err: = client.Data.Delete(context.Background(), & v1.DataDeleteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataDeleteRequestMetadata {\n        SnapToken: \"\"\n    },\n    TupleFilter: &v1.TupleFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Relation: \"admin\",\n    Subject: &v1.SubjectFilter {\n        Type: \"user\",\n        Id: []string {\"1\"},\n        Relation: \"\"\n    }}\n})\n\x97\x03*\x94\x03\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xea\x02\n\x06source\x12\xdf\x02\x1a\xdc\x02\x63lient.data.delete({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  tupleFilter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"admin\",\n    subject: {\n      type: \"user\",\n      ids: [\n        \"1\"\n      ],\n      relation: \"\"\n    }\n  }\n}).then((response) => {\n    // handle response\n})\n\xb5\x03*\xb2\x03\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x8e\x03\n\x06source\x12\x83\x03\x1a\x80\x03\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/delete\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"tupleFilter\": {\n    \"entity\": {\n      \"type\": \"organization\",\n      \"ids\": [\n        \"1\"\n      ]\n    },\n    \"relation\": \"admin\",\n    \"subject\": {\n      \"type\": \"user\",\n      \"ids\": [\n        \"1\"\n      ],\n      \"relation\": \"\"\n    }\n  },\n}\'\x82\xd3\xe4\x93\x02(\"#/v1/tenants/{tenant_id}/data/delete:\x01*\x12\xcc\x01\n\x13\x44\x65leteRelationships\x12\".base.v1.RelationshipDeleteRequest\x1a#.base.v1.RelationshipDeleteResponse\"l\x92\x41\x32\n\x04\x44\x61ta\x12\x14\x64\x65lete relationships*\x14relationships.delete\x82\xd3\xe4\x93\x02\x31\",/v1/tenants/{tenant_id}/relationships/delete:\x01*\x12\xad\x08\n\tRunBundle\x12\x19.base.v1.BundleRunRequest\x1a\x1a.base.v1.BundleRunResponse\"\xe8\x07\x92\x41\xb2\x07\n\x04\x44\x61ta\x12\nrun bundle*\nbundle.runj\x91\x07\n\rx-codeSamples\x12\xff\x06\x32\xfc\x06\n\xa5\x02*\xa2\x02\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x82\x02\n\x06source\x12\xf7\x01\x1a\xf4\x01rr, err: = client.Data.RunBundle(context.Background(), &v1.BundleRunRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n    Arguments: map[string]string{\n        \"creatorID\":      \"564\",\n        \"organizationID\": \"789\",\n    },\n})\n\x8a\x02*\x87\x02\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xdd\x01\n\x06source\x12\xd2\x01\x1a\xcf\x01\x63lient.data.runBundle({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n    arguments: {\n        creatorID: \"564\",\n        organizationID: \"789\",\n    }\n}).then((response) => {\n    // handle response\n})\n\xc4\x02*\xc1\x02\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\x9d\x02\n\x06source\x12\x92\x02\x1a\x8f\x02\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/run-bundle\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n    \"arguments\": {\n        \"creatorID\": \"564\",\n        \"organizationID\": \"789\",\n    }\n}\'\x82\xd3\xe4\x93\x02,\"\'/v1/tenants/{tenant_id}/data/run-bundle:\x01*2\xc8!\n\x06\x42undle\x12\x86\x15\n\x05Write\x12\x1b.base.v1.BundleWriteRequest\x1a\x1c.base.v1.BundleWriteResponse\"\xc1\x14\x92\x41\x8e\x14\n\x06\x42undle\x12\x0cwrite bundle*\x0c\x62undle.writej\xe7\x13\n\rx-codeSamples\x12\xd5\x13\x32\xd2\x13\n\xd3\x06*\xd0\x06\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\xb0\x06\n\x06source\x12\xa5\x06\x1a\xa2\x06rr, err := client.Bundle.Write(context.Background(), &v1.BundleWriteRequest{\n    TenantId: \"t1\",\n    Bundles: []*v1.DataBundle{\n        {\n            Name: \"organization_created\",\n            Arguments: []string{\n                \"creatorID\",\n                \"organizationID\",\n            },\n            Operations: []*v1.Operation{\n                {\n                    RelationshipsWrite: []string{\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    },\n                    AttributesWrite: []string{\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    },\n                },\n            },\n        },\n    },\n})\n\x9b\x06*\x98\x06\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\xee\x05\n\x06source\x12\xe3\x05\x1a\xe0\x05\x63lient.bundle.write({\n    tenantId: \"t1\",\n    bundles: [\n        {\n            name: \"organization_created\",\n            arguments: [\n                \"creatorID\",\n                \"organizationID\",\n            ],\n            operations: [\n                {\n                    relationships_write: [\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    ],\n                    attributes_write: [\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    ]\n                }\n            ]\n        }\n    ]\n}).then((response) => {\n    // handle response\n})\n\xdb\x06*\xd8\x06\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xb4\x06\n\x06source\x12\xa9\x06\x1a\xa6\x06\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"bundles\": [\n        {\n            \"name\": \"organization_created\"\n            \"arguments\": [\n                \"creatorID\",\n                \"organizationID\"\n            ],\n            \"operations\": [\n                {\n                    \"relationships_write\": [\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    ],\n                    \"attributes_write\": [\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    ],\n                },\n            ],\n        },\n    ],\n}\'\x82\xd3\xe4\x93\x02)\"$/v1/tenants/{tenant_id}/bundle/write:\x01*\x12\x8e\x06\n\x04Read\x12\x1a.base.v1.BundleReadRequest\x1a\x1b.base.v1.BundleReadResponse\"\xcc\x05\x92\x41\x9a\x05\n\x06\x42undle\x12\x0bread bundle*\x0b\x62undle.readj\xf5\x04\n\rx-codeSamples\x12\xe3\x04\x32\xe0\x04\n\xb8\x01*\xb5\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x95\x01\n\x06source\x12\x8a\x01\x1a\x87\x01rr, err: = client.Bundle.Read(context.Background(), &v1.BundleReadRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n})\n\xb5\x01*\xb2\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x88\x01\n\x06source\x12~\x1a|client.bundle.read({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n}).then((response) => {\n    // handle response\n})\n\xea\x01*\xe7\x01\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xc3\x01\n\x06source\x12\xb8\x01\x1a\xb5\x01\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n}\'\x82\xd3\xe4\x93\x02(\"#/v1/tenants/{tenant_id}/bundle/read:\x01*\x12\xa3\x06\n\x06\x44\x65lete\x12\x1c.base.v1.BundleDeleteRequest\x1a\x1d.base.v1.BundleDeleteResponse\"\xdb\x05\x92\x41\xa7\x05\n\x06\x42undle\x12\rdelete bundle*\rbundle.deletej\xfe\x04\n\rx-codeSamples\x12\xec\x04\x32\xe9\x04\n\xbc\x01*\xb9\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x99\x01\n\x06source\x12\x8e\x01\x1a\x8b\x01rr, err: = client.Bundle.Delete(context.Background(), &v1.BundleDeleteRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n})\n\xb8\x01*\xb5\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n\x8b\x01\n\x06source\x12\x80\x01\x1a~client.bundle.delete({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n}).then((response) => {\n    // handle response\n})\n\xec\x01*\xe9\x01\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xc5\x01\n\x06source\x12\xba\x01\x1a\xb7\x01\x63url --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/delete\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n}\'\x82\xd3\xe4\x93\x02*\"%/v1/tenants/{tenant_id}/bundle/delete:\x01*2\xc2\x0f\n\x07Tenancy\x12\xbc\x05\n\x06\x43reate\x12\x1c.base.v1.TenantCreateRequest\x1a\x1d.base.v1.TenantCreateResponse\"\xf4\x04\x92\x41\xd3\x04\n\x07Tenancy\x12\rcreate tenant*\x0etenants.createj\xa8\x04\n\rx-codeSamples\x12\x96\x04\x32\x93\x04\n\x99\x01*\x96\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\nw\n\x06source\x12m\x1akrr, err: = client.Tenancy.Create(context.Background(), &v1.TenantCreateRequest {\n    Id: \"\"\n    Name: \"\"\n})\n\x98\x01*\x95\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\nl\n\x06source\x12\x62\x1a`client.tenancy.create({\n   id: \"\",\n   name: \"\"\n}).then((response) => {\n    // handle response\n})\n\xd9\x01*\xd6\x01\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xb2\x01\n\x06source\x12\xa7\x01\x1a\xa4\x01\x63url --location --request POST \'http://localhost:3476/v1/tenants/create\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"id\": \"\",\n    \"name\": \"\"\n}\'\x82\xd3\xe4\x93\x02\x17\"\x12/v1/tenants/create:\x01*\x12\xbb\x04\n\x06\x44\x65lete\x12\x1c.base.v1.TenantDeleteRequest\x1a\x1d.base.v1.TenantDeleteResponse\"\xf3\x03\x92\x41\xd7\x03\n\x07Tenancy\x12\rdelete tenant*\x0etenants.deletej\xac\x03\n\rx-codeSamples\x12\x9a\x03\x32\x97\x03\n\x8c\x01*\x89\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\nj\n\x06source\x12`\x1a^rr, err: = client.Tenancy.Delete(context.Background(), &v1.TenantDeleteRequest {\n    Id: \"\"\n})\n\x8c\x01*\x89\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\n`\n\x06source\x12V\x1aTclient.tenancy.delete({\n   id: \"\",\n}).then((response) => {\n    // handle response\n})\nw*u\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\nR\n\x06source\x12H\x1a\x46\x63url --location --request DELETE \'http://localhost:3476/v1/tenants/t1\'\x82\xd3\xe4\x93\x02\x12*\x10/v1/tenants/{id}\x12\xb9\x05\n\x04List\x12\x1a.base.v1.TenantListRequest\x1a\x1b.base.v1.TenantListResponse\"\xf7\x04\x92\x41\xd8\x04\n\x07Tenancy\x12\x0clist tenants*\x0ctenants.listj\xb0\x04\n\rx-codeSamples\x12\x9e\x04\x32\x9b\x04\n\xa8\x01*\xa5\x01\n\r\n\x05label\x12\x04\x1a\x02go\n\x0c\n\x04lang\x12\x04\x1a\x02go\n\x85\x01\n\x06source\x12{\x1aycr, err := client.Tenancy.List(context.Background(), &v1.TenantListRequest{\n    PageSize: 20,\n    ContinuousToken: \"\",\n})\n\x85\x01*\x82\x01\n\x0f\n\x05label\x12\x06\x1a\x04node\n\x14\n\x04lang\x12\x0c\x1a\njavascript\nY\n\x06source\x12O\x1aMlet res = client.tenancy.list({\n    pageSize: 20,\n    continuousToken: \"\",\n})\n\xe5\x01*\xe2\x01\n\x0f\n\x05label\x12\x06\x1a\x04\x63URL\n\x0e\n\x04lang\x12\x06\x1a\x04\x63url\n\xbe\x01\n\x06source\x12\xb3\x01\x1a\xb0\x01\x63url --location --request POST \'localhost:3476/v1/tenants/list\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"page_size\": \"10\",\n    \"continuous_token\": \"\"\n}\'\x82\xd3\xe4\x93\x02\x15\"\x10/v1/tenants/list:\x01*B+Z)github.com/Permify/permify/pkg/pb/base/v1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'base.v1.service_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'Z)github.com/Permify/permify/pkg/pb/base/v1'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['entity']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['entity']._serialized_options = b'\222A\020J\016\"repository:1\"\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['permission']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['permission']._serialized_options = b'\222A624The action the user wants to perform on the resource\372B\032r\030(@2\021^[a-zA-Z_]{1,64}$\320\001\000'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['subject']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['subject']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['context']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUEST'].fields_by_name['context']._serialized_options = b'\222A\223\0012\220\001Contextual data that can be dynamically added to permission check requests. See details on [Contextual Data](../../operations/contextual-tuples)'
  _globals['_PERMISSIONCHECKREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_PERMISSIONCHECKREQUESTMETADATA'].fields_by_name['depth']._loaded_options = None
  _globals['_PERMISSIONCHECKREQUESTMETADATA'].fields_by_name['depth']._serialized_options = b'\222A<2:Query limit when if recursive database queries got in loop\372B\004\032\002(\003'
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['entity']._loaded_options = None
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['entity']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['permission']._loaded_options = None
  _globals['_PERMISSIONEXPANDREQUEST'].fields_by_name['permission']._serialized_options = b'\372B\032r\030(@2\021^[a-zA-Z_]{1,64}$\320\001\001'
  _globals['_PERMISSIONEXPANDREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONEXPANDREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['entity_type']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['entity_type']._serialized_options = b'\372B\032r\030(@2\021^[a-zA-Z_]{1,64}$\320\001\000'
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['permission']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['permission']._serialized_options = b'\372B\032r\030(@2\021^[a-zA-Z_]{1,64}$\320\001\000'
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['subject']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUEST'].fields_by_name['subject']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA'].fields_by_name['depth']._loaded_options = None
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA'].fields_by_name['depth']._serialized_options = b'\222A=2;Query limit when if recursive database queries got in loop.\372B\004\032\002(\003'
  _globals['_PERMISSIONENTITYFILTERREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONENTITYFILTERREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONENTITYFILTERREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONENTITYFILTERREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA'].fields_by_name['depth']._loaded_options = None
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA'].fields_by_name['depth']._serialized_options = b'\222A=2;Query limit when if recursive database queries got in loop.\372B\004\032\002(\003'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['entity']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['entity']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['permission']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST'].fields_by_name['permission']._serialized_options = b'\372B\032r\030(@2\021^[a-zA-Z_]{1,64}$\320\001\000'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA'].fields_by_name['depth']._loaded_options = None
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA'].fields_by_name['depth']._serialized_options = b'\222A=2;Query limit when if recursive database queries got in loop.\372B\004\032\002(\003'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['entity']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['entity']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['subject']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST'].fields_by_name['subject']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA'].fields_by_name['depth']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA'].fields_by_name['depth']._serialized_options = b'\222A=2;Query limit when if recursive database queries got in loop.\372B\004\032\002(\003'
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE_RESULTSENTRY']._loaded_options = None
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE_RESULTSENTRY']._serialized_options = b'8\001'
  _globals['_WATCHREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_WATCHREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_WATCHREQUEST'].fields_by_name['snap_token']._loaded_options = None
  _globals['_WATCHREQUEST'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_SCHEMAWRITEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_SCHEMAWRITEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_SCHEMAPARTIALWRITEREQUEST_PARTIALSENTRY']._loaded_options = None
  _globals['_SCHEMAPARTIALWRITEREQUEST_PARTIALSENTRY']._serialized_options = b'8\001'
  _globals['_SCHEMAPARTIALWRITEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_SCHEMAPARTIALWRITEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_SCHEMAPARTIALWRITEREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_SCHEMAPARTIALWRITEREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_SCHEMAREADREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_SCHEMAREADREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_SCHEMAREADREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_SCHEMAREADREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_SCHEMALISTREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_SCHEMALISTREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_SCHEMALISTREQUEST'].fields_by_name['page_size']._loaded_options = None
  _globals['_SCHEMALISTREQUEST'].fields_by_name['page_size']._serialized_options = b'\372B\010*\006\030d(\001@\001'
  _globals['_SCHEMALISTREQUEST'].fields_by_name['continuous_token']._loaded_options = None
  _globals['_SCHEMALISTREQUEST'].fields_by_name['continuous_token']._serialized_options = b'\372B\005r\003\320\001\001'
  _globals['_DATAWRITEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_DATAWRITEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_DATAWRITEREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_DATAWRITEREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_DATAWRITEREQUEST'].fields_by_name['tuples']._loaded_options = None
  _globals['_DATAWRITEREQUEST'].fields_by_name['tuples']._serialized_options = b'\372B\016\222\001\013\010\000\020d\"\005\212\001\002\020\001'
  _globals['_DATAWRITEREQUEST'].fields_by_name['attributes']._loaded_options = None
  _globals['_DATAWRITEREQUEST'].fields_by_name['attributes']._serialized_options = b'\372B\016\222\001\013\010\000\020d\"\005\212\001\002\020\001'
  _globals['_DATAWRITERESPONSE'].fields_by_name['snap_token']._loaded_options = None
  _globals['_DATAWRITERESPONSE'].fields_by_name['snap_token']._serialized_options = b'\222Ag2eThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens).'
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['tuples']._loaded_options = None
  _globals['_RELATIONSHIPWRITEREQUEST'].fields_by_name['tuples']._serialized_options = b'\372B\016\222\001\013\010\001\020d\"\005\212\001\002\020\001'
  _globals['_RELATIONSHIPWRITERESPONSE'].fields_by_name['snap_token']._loaded_options = None
  _globals['_RELATIONSHIPWRITERESPONSE'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['filter']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['filter']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['page_size']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['page_size']._serialized_options = b'\372B\010*\006\030d(\001@\001'
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['continuous_token']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUEST'].fields_by_name['continuous_token']._serialized_options = b'\372B\005r\003\320\001\001'
  _globals['_RELATIONSHIPREADREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_RELATIONSHIPREADREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['metadata']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['metadata']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['filter']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['filter']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['page_size']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['page_size']._serialized_options = b'\372B\010*\006\030d(\001@\001'
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['continuous_token']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUEST'].fields_by_name['continuous_token']._serialized_options = b'\372B\005r\003\320\001\001'
  _globals['_ATTRIBUTEREADREQUESTMETADATA'].fields_by_name['snap_token']._loaded_options = None
  _globals['_ATTRIBUTEREADREQUESTMETADATA'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_DATADELETEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_DATADELETEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_DATADELETEREQUEST'].fields_by_name['tuple_filter']._loaded_options = None
  _globals['_DATADELETEREQUEST'].fields_by_name['tuple_filter']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_DATADELETEREQUEST'].fields_by_name['attribute_filter']._loaded_options = None
  _globals['_DATADELETEREQUEST'].fields_by_name['attribute_filter']._serialized_options = b'\372B\005\212\001\002\020\001'
  _globals['_DATADELETERESPONSE'].fields_by_name['snap_token']._loaded_options = None
  _globals['_DATADELETERESPONSE'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_RELATIONSHIPDELETEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_RELATIONSHIPDELETEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_RELATIONSHIPDELETERESPONSE'].fields_by_name['snap_token']._loaded_options = None
  _globals['_RELATIONSHIPDELETERESPONSE'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_BUNDLERUNREQUEST_ARGUMENTSENTRY']._loaded_options = None
  _globals['_BUNDLERUNREQUEST_ARGUMENTSENTRY']._serialized_options = b'8\001'
  _globals['_BUNDLERUNREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_BUNDLERUNREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_BUNDLERUNRESPONSE'].fields_by_name['snap_token']._loaded_options = None
  _globals['_BUNDLERUNRESPONSE'].fields_by_name['snap_token']._serialized_options = b'\222Af2dThe snap token to avoid stale cache, see more details on [Snap Tokens](../../operations/snap-tokens)'
  _globals['_BUNDLEWRITEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_BUNDLEWRITEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_BUNDLEREADREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_BUNDLEREADREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_BUNDLEDELETEREQUEST'].fields_by_name['tenant_id']._loaded_options = None
  _globals['_BUNDLEDELETEREQUEST'].fields_by_name['tenant_id']._serialized_options = b'\222A\331\0012\326\001Identifier of the tenant, if you are not using multi-tenancy (have only one tenant) use pre-inserted tenant <code>t1</code> for this field. Required, and must match the pattern \\\342\200\234[a-zA-Z0-9-,]+\\\342\200\234, max 64 bytes.\372B+r)(\200\0012!^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$\320\001\000'
  _globals['_TENANTCREATEREQUEST'].fields_by_name['id']._loaded_options = None
  _globals['_TENANTCREATEREQUEST'].fields_by_name['id']._serialized_options = b'\372B\027r\025(@2\016[a-zA-Z0-9-,]+\320\001\000'
  _globals['_TENANTCREATEREQUEST'].fields_by_name['name']._loaded_options = None
  _globals['_TENANTCREATEREQUEST'].fields_by_name['name']._serialized_options = b'\372B\007r\005(@\320\001\000'
  _globals['_TENANTDELETEREQUEST'].fields_by_name['id']._loaded_options = None
  _globals['_TENANTDELETEREQUEST'].fields_by_name['id']._serialized_options = b'\372B\005r\003\320\001\000'
  _globals['_TENANTLISTREQUEST'].fields_by_name['page_size']._loaded_options = None
  _globals['_TENANTLISTREQUEST'].fields_by_name['page_size']._serialized_options = b'\372B\010*\006\030d(\001@\001'
  _globals['_TENANTLISTREQUEST'].fields_by_name['continuous_token']._loaded_options = None
  _globals['_TENANTLISTREQUEST'].fields_by_name['continuous_token']._serialized_options = b'\372B\005r\003\320\001\001'
  _globals['_PERMISSION'].methods_by_name['Check']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['Check']._serialized_options = b'\222A\370\014\n\nPermission\022\tcheck api*\021permissions.checkj\313\014\n\rx-codeSamples\022\271\0142\266\014\n\325\004*\322\004\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\262\004\n\006source\022\247\004\032\244\004cr, err := client.Permission.Check(context.Background(), &v1.PermissionCheckRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionCheckRequestMetadata {\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n\n    if (cr.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        // RESULT_ALLOWED\n    } else {\n        // RESULT_DENIED\n    }\n})\n\233\004*\230\004\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\356\003\n\006source\022\343\003\032\340\003client.permission.check({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        console.log(\"RESULT_ALLOWED\")\n    } else {\n        console.log(\"RESULT_DENIED\")\n    }\n})\n\275\003*\272\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\226\003\n\006source\022\213\003\032\210\003curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/check\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}\'\202\323\344\223\002.\")/v1/tenants/{tenant_id}/permissions/check:\001*'
  _globals['_PERMISSION'].methods_by_name['Expand']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['Expand']._serialized_options = b'\222A\247\010\n\nPermission\022\nexpand api*\022permissions.expandj\370\007\n\rx-codeSamples\022\346\0072\343\007\n\356\002*\353\002\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\313\002\n\006source\022\300\002\032\275\002cr, err: = client.Permission.Expand(context.Background(), &v1.PermissionExpandRequest{\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionExpandRequestMetadata{\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n    },\n    Entity: &v1.Entity{\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"push\",\n})\n\211\002*\206\002\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\334\001\n\006source\022\321\001\032\316\001client.permission.expand({\n  tenantId: \"t1\",\n  metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\"\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"push\",\n})\n\343\002*\340\002\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\274\002\n\006source\022\261\002\032\256\002curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/expand\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\": {\n    \"schema_version\": \"\",\n    \"snap_token\": \"\"\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"push\"\n}\'\202\323\344\223\002/\"*/v1/tenants/{tenant_id}/permissions/expand:\001*'
  _globals['_PERMISSION'].methods_by_name['LookupEntity']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['LookupEntity']._serialized_options = b'\222A\216\n\n\nPermission\022\rlookup entity*\030permissions.lookupEntityj\326\t\n\rx-codeSamples\022\304\t2\301\t\n\256\003*\253\003\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\213\003\n\006source\022\200\003\032\375\002cr, err: = client.Permission.LookupEntity(context.Background(), & v1.PermissionLookupEntityRequest {\n    TenantId: \"t1\",\n    Metadata: & v1.PermissionLookupEntityRequestMetadata {\n        SnapToken: \"\"\n        SchemaVersion: \"\"\n        Depth: 20,\n    },\n    EntityType: \"document\",\n    Permission: \"edit\",\n    Subject: & v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    }\n})\n\372\002*\367\002\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\315\002\n\006source\022\302\002\032\277\002client.permission.lookupEntity({\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity_type: \"document\",\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    console.log(response.entity_ids)\n})\n\220\003*\215\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\351\002\n\006source\022\336\002\032\333\002curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/lookup-entity\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity_type\": \"document\",\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\":\"user\",\n    \"id\":\"1\"\n  }\n}\'\202\323\344\223\0026\"1/v1/tenants/{tenant_id}/permissions/lookup-entity:\001*'
  _globals['_PERMISSION'].methods_by_name['LookupEntityStream']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['LookupEntityStream']._serialized_options = b'\222A\272\013\n\nPermission\022\024lookup entity stream*\036permissions.lookupEntityStreamj\365\n\n\rx-codeSamples\022\343\n2\340\n\n\241\004*\236\004\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\376\003\n\006source\022\363\003\032\360\003str, err: = client.Permission.LookupEntityStream(context.Background(), &v1.PermissionLookupEntityRequest {\n    Metadata: &v1.PermissionLookupEntityRequestMetadata {\n        SnapToken: \"\", \n        SchemaVersion: \"\" \n        Depth: 50,\n    },\n    EntityType: \"document\",\n    Permission: \"view\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n})\n\n// handle stream response\nfor {\n    res, err: = str.Recv()\n\n    if err == io.EOF {\n        break\n    }\n\n    // res.EntityId\n}\n\271\006*\266\006\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\214\006\n\006source\022\201\006\032\376\005const permify = require(\"@permify/permify-node\");\nconst {PermissionLookupEntityStreamResponse} = require(\"@permify/permify-node/dist/src/grpc/generated/base/v1/service\");\n\nfunction main() {\n    const client = new permify.grpc.newClient({\n        endpoint: \"localhost:3478\",\n    })\n\n    let res = client.permission.lookupEntityStream({\n        metadata: {\n            snapToken: \"\",\n            schemaVersion: \"\",\n            depth: 20\n        },\n        entityType: \"document\",\n        permission: \"view\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    })\n\n    handle(res)\n}\n\nasync function handle(res: AsyncIterable<PermissionLookupEntityStreamResponse>) {\n    for await (const response of res) {\n        // response.entityId\n    }\n}\202\323\344\223\002=\"8/v1/tenants/{tenant_id}/permissions/lookup-entity-stream:\001*'
  _globals['_PERMISSION'].methods_by_name['LookupSubject']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['LookupSubject']._serialized_options = b'\222A\264\013\n\nPermission\022\016lookup-subject*\031permissions.lookupSubjectj\372\n\n\rx-codeSamples\022\350\n2\345\n\n\364\003*\361\003\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\321\003\n\006source\022\306\003\032\303\003cr, err: = client.Permission.LookupSubject(context.Background(), &v1.PermissionLookupSubjectRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionLookupSubjectRequestMetadata{\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        Depth: 20,\n    },\n    Entity: &v1.Entity{\n        Type: \"document\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    SubjectReference: &v1.RelationReference{\n        Type: \"user\",\n        Relation: \"\",\n    }\n})\n\256\003*\253\003\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\201\003\n\006source\022\366\002\032\363\002client.permission.lookupSubject({\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\"\n        depth: 20,\n    },\n    Entity: {\n        Type: \"document\",\n        Id: \"1\",\n    },\n    permission: \"edit\",\n    subject_reference: {\n        type: \"user\",\n        relation: \"\"\n    }\n}).then((response) => {\n    console.log(response.subject_ids)\n})\n\272\003*\267\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\223\003\n\006source\022\210\003\032\205\003curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/lookup-subject\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\"\n    \"depth\": 20,\n  },\n  \"entity\": {\n    type: \"document\",\n    id: \"1\'\n  },\n  \"permission\": \"edit\",\n  \"subject_reference\": {\n    \"type\": \"user\",\n    \"relation\": \"\"\n  }\n}\'\202\323\344\223\0027\"2/v1/tenants/{tenant_id}/permissions/lookup-subject:\001*'
  _globals['_PERMISSION'].methods_by_name['SubjectPermission']._loaded_options = None
  _globals['_PERMISSION'].methods_by_name['SubjectPermission']._serialized_options = b'\222A\304\013\n\nPermission\022\022subject permission*\035permissions.subjectPermissionj\202\013\n\rx-codeSamples\022\360\n2\355\n\n\365\003*\362\003\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\322\003\n\006source\022\307\003\032\304\003cr, err: = client.Permission.SubjectPermission(context.Background(), &v1.PermissionSubjectPermissionRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionSubjectPermissionRequestMetadata {\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        OnlyPermission: false,\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n})\n\240\003*\235\003\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\363\002\n\006source\022\350\002\032\345\002client.permission.subjectPermission({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        onlyPermission: true,\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    console.log(response);\n})\n\317\003*\314\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\250\003\n\006source\022\235\003\032\232\003curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/permissions/subject-permission\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"only_permission\": true,\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}\'\202\323\344\223\002;\"6/v1/tenants/{tenant_id}/permissions/subject-permission:\001*'
  _globals['_WATCH'].methods_by_name['Watch']._loaded_options = None
  _globals['_WATCH'].methods_by_name['Watch']._serialized_options = b'\222A\222\007\n\005Watch\022\rwatch changes*\013watch.watchj\354\006\n\rx-codeSamples\022\332\0062\327\006\n\236\002*\233\002\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\373\001\n\006source\022\360\001\032\355\001cr, err := client.Watch.Watch(context.Background(), &v1.WatchRequest{\n    TenantId:  \"t1\",\n    SnapToken: \"\",\n})\n// handle stream response\nfor {\n    res, err := cr.Recv()\n\n    if err == io.EOF {\n        break\n    }\n\n    // res.Changes\n}\n\n\263\004*\260\004\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\206\004\n\006source\022\373\003\032\370\003const permify = require(\"@permify/permify-node\");\nconst {WatchResponse} = require(\"@permify/permify-node/dist/src/grpc/generated/base/v1/service\");\n\nfunction main() {\n    const client = new permify.grpc.newClient({\n        endpoint: \"localhost:3478\",\n    })\n\n    let res = client.watch.watch({\n          tenantId: \"t1\",\n        snapToken: \"\"\n    })\n\n    handle(res)\n}\n\nasync function handle(res: AsyncIterable<WatchResponse>) {\n    for await (const response of res) {\n        // response.changes\n    }\n}\n\202\323\344\223\002\"\"\035/v1/tenants/{tenant_id}/watch:\001*'
  _globals['_SCHEMA'].methods_by_name['Write']._loaded_options = None
  _globals['_SCHEMA'].methods_by_name['Write']._serialized_options = b'\222A\211\020\n\006Schema\022\014write schema*\rschemas.writej\341\017\n\rx-codeSamples\022\317\0172\314\017\n\212\005*\207\005\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\347\004\n\006source\022\334\004\032\331\004sr, err: = client.Schema.Write(context.Background(), &v1.SchemaWriteRequest {\n    TenantId: \"t1\",\n    Schema: `\n    \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n    }\"\n    `,\n})\n\212\005*\207\005\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\335\004\n\006source\022\322\004\032\317\004client.schema.write({\n    tenantId: \"t1\",\n    schema: `\n    \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n    }\"\n    `\n}).then((response) => {\n    // handle response\n})\n\257\005*\254\005\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\210\005\n\006source\022\375\004\032\372\004curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"schema\": \"entity user {}\\n\\n    entity organization {\\n\\n        relation admin @user\\n        relation member @user\\n\\n        action create_repository = (admin or member)\\n        action delete = admin\\n    }\\n\\n    entity repository {\\n\\n        relation owner @user\\n        relation parent @organization\\n\\n        action push = owner\\n        action read = (owner and (parent.admin and parent.member))\\n        action delete = (parent.member and (parent.admin or owner))\\n }\"\n}\'\202\323\344\223\002*\"%/v1/tenants/{tenant_id}/schemas/write:\001*'
  _globals['_SCHEMA'].methods_by_name['PartialWrite']._loaded_options = None
  _globals['_SCHEMA'].methods_by_name['PartialWrite']._serialized_options = b'\222AJ\n\006Schema\022)partially update your authorization model*\025schemas.partial-write\202\323\344\223\00222-/v1/tenants/{tenant_id}/schemas/partial-write:\001*'
  _globals['_SCHEMA'].methods_by_name['Read']._loaded_options = None
  _globals['_SCHEMA'].methods_by_name['Read']._serialized_options = b'\222A\200\006\n\006Schema\022\013read schema*\014schemas.readj\332\005\n\rx-codeSamples\022\310\0052\305\005\n\366\001*\363\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\323\001\n\006source\022\310\001\032\305\001sr, err: = client.Schema.Read(context.Background(), &v1.SchemaReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.SchemaReadRequestMetadata{\n        SchemaVersion: \"cnbe6se5fmal18gpc66g\",\n    },\n})\n\266\001*\263\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\211\001\n\006source\022\177\032}let res = client.schema.read({\n    tenantId: \"t1\",\n    metadata: {\n    schemaVersion: swResponse.schemaVersion,\n    },\n    })\n\220\002*\215\002\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\351\001\n\006source\022\336\001\032\333\001curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"metadata\": {\n        \"schema_version\": \"cnbe6se5fmal18gpc66g\"\n    }\n}\'\202\323\344\223\002)\"$/v1/tenants/{tenant_id}/schemas/read:\001*'
  _globals['_SCHEMA'].methods_by_name['List']._loaded_options = None
  _globals['_SCHEMA'].methods_by_name['List']._serialized_options = b'\222A\202\005\n\006Schema\022\013list schema*\014schemas.listj\334\004\n\rx-codeSamples\022\312\0042\307\004\n\300\001*\275\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\235\001\n\006source\022\222\001\032\217\001sr, err: = client.Schema.List(context.Background(), &v1.SchemaListRequest {\n    TenantId: \"t1\",\n    PageSize: \"10\",\n    ContinuousToken: \"\",\n})\n\205\001*\202\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\nY\n\006source\022O\032Mlet res = client.schema.list({\n    tenantId: \"t1\",\n    continuousToken: \"\"\n})\n\371\001*\366\001\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\322\001\n\006source\022\307\001\032\304\001curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/schemas/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"page_size\": \"10\",\n    \"continuous_token\": \"\"\n}\'\202\323\344\223\002)\"$/v1/tenants/{tenant_id}/schemas/list:\001*'
  _globals['_DATA'].methods_by_name['Write']._loaded_options = None
  _globals['_DATA'].methods_by_name['Write']._serialized_options = b'\222A\233\024\n\004Data\022\nwrite data*\ndata.writej\372\023\n\rx-codeSamples\022\350\0232\345\023\n\273\007*\270\007\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\230\007\n\006source\022\215\007\032\212\007// Convert the wrapped attribute value into Any proto message\nvalue, err := anypb.New(&v1.BooleanValue{\n    Data: true,\n})\nif err != nil {\n    // Handle error\n}\n\ncr, err := client.Data.Write(context.Background(), &v1.DataWriteRequest{\n    TenantId: \"t1\",,\n    Metadata: &v1.DataWriteRequestMetadata{\n        SchemaVersion: \"\",\n    },\n    Tuples: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Relation: \"editor\",\n            Subject:  &v1.Subject{\n                Type: \"user\",\n                Id:   \"1\",\n                Relation: \"\",\n            },\n        },\n    },\n    Attributes: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Attribute: \"is_private\",\n            Value:     value,\n        },\n    },\n})\n\200\006*\375\005\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\323\005\n\006source\022\310\005\032\305\005const booleanValue = BooleanValue.fromJSON({ data: true });\n\nconst value = Any.fromJSON({\n    typeUrl: \'type.googleapis.com/base.v1.BooleanValue\',\n    value: BooleanValue.encode(booleanValue).finish()\n});\n\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        relation: \"editor\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    }],\n    attributes: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        attribute: \"is_private\",\n        value: value,\n    }]\n}).then((response) => {\n    // handle response\n})\n\241\006*\236\006\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\372\005\n\006source\022\357\005\032\354\005curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n      {\n        \"entity\": {\n          \"type\": \"document\",\n          \"id\": \"1\"\n        },\n        \"relation\": \"editor\",\n        \"subject\": {\n          \"type\": \"user\",\n          \"id\": \"1\"\n        }\n    }\n    ],\n    \"attributes\": [\n        {\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": {\n                \"@type\": \"type.googleapis.com/base.v1.BooleanValue\",\n                \"data\": true\n            }\n        }\n    ]\n}\n}\'\202\323\344\223\002\'\"\"/v1/tenants/{tenant_id}/data/write:\001*'
  _globals['_DATA'].methods_by_name['WriteRelationships']._loaded_options = None
  _globals['_DATA'].methods_by_name['WriteRelationships']._serialized_options = b'\222A0\n\004Data\022\023write relationships*\023relationships.write\202\323\344\223\0020\"+/v1/tenants/{tenant_id}/relationships/write:\001*'
  _globals['_DATA'].methods_by_name['ReadRelationships']._loaded_options = None
  _globals['_DATA'].methods_by_name['ReadRelationships']._serialized_options = b'\222A\234\013\n\004Data\022\022read relationships*\027data.relationships.readj\346\n\n\rx-codeSamples\022\324\n2\321\n\n\206\004*\203\004\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\343\003\n\006source\022\330\003\032\325\003rr, err: = client.Data.ReadRelationships(context.Background(), & v1.Data.RelationshipReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.Data.RelationshipReadRequestMetadata {\n        SnapToken: \"\"\n    },\n    Filter: &v1.TupleFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Relation: \"member\",\n    Subject: &v1.SubjectFilter {\n        Type: \"\",\n        Id: []string {\"\"},\n        Relation: \"\"\n    }}\n})\n\207\003*\204\003\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\332\002\n\006source\022\317\002\032\314\002client.data.readRelationships({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"member\",\n    subject: {\n      type: \"\",\n      ids: [],\n      relation: \"\"\n    }\n  }\n}).then((response) => {\n    // handle response\n})\n\273\003*\270\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\224\003\n\006source\022\211\003\032\206\003curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/relationships/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"member\",\n    subject: {\n      type: \"\",\n      ids: [],\n      relation: \"\"\n    }\n  }\n}\'\202\323\344\223\0024\"//v1/tenants/{tenant_id}/data/relationships/read:\001*'
  _globals['_DATA'].methods_by_name['ReadAttributes']._loaded_options = None
  _globals['_DATA'].methods_by_name['ReadAttributes']._serialized_options = b'\222A\311\t\n\004Data\022\017read attributes*\024data.attributes.readj\231\t\n\rx-codeSamples\022\207\t2\204\t\n\245\003*\242\003\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\202\003\n\006source\022\367\002\032\364\002rr, err: = client.Data.ReadAttributes(context.Background(), & v1.Data.AttributeReadRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.Data.AttributeReadRequestMetadata {\n        SnapToken: \"\"\n    },\n    Filter: &v1.AttributeFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Attributes: []string {\"private\"},\n})\n\320\002*\315\002\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\243\002\n\006source\022\230\002\032\225\002client.data.readAttributes({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    attributes: [\n        \"private\"\n    ],\n  }\n}).then((response) => {\n    // handle response\n})\n\206\003*\203\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\337\002\n\006source\022\324\002\032\321\002curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/attributes/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  metadata: {\n     snap_token: \"\",\n  },\n  filter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    attributes: [\n        \"private\"\n      ],\n  }\n}\'\202\323\344\223\0021\",/v1/tenants/{tenant_id}/data/attributes/read:\001*'
  _globals['_DATA'].methods_by_name['Delete']._loaded_options = None
  _globals['_DATA'].methods_by_name['Delete']._serialized_options = b'\222A\373\n\n\004Data\022\013delete data*\013data.deletej\330\n\n\rx-codeSamples\022\306\n2\303\n\n\356\003*\353\003\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\313\003\n\006source\022\300\003\032\275\003rr, err: = client.Data.Delete(context.Background(), & v1.DataDeleteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataDeleteRequestMetadata {\n        SnapToken: \"\"\n    },\n    TupleFilter: &v1.TupleFilter {\n        Entity: &v1.EntityFilter {\n        Type: \"organization\",\n        Ids: []string {\"1\"} ,\n    },\n    Relation: \"admin\",\n    Subject: &v1.SubjectFilter {\n        Type: \"user\",\n        Id: []string {\"1\"},\n        Relation: \"\"\n    }}\n})\n\227\003*\224\003\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\352\002\n\006source\022\337\002\032\334\002client.data.delete({\n  tenantId: \"t1\",\n  metadata: {\n     snap_token: \"\",\n  },\n  tupleFilter: {\n    entity: {\n      type: \"organization\",\n      ids: [\n        \"1\"\n      ]\n    },\n    relation: \"admin\",\n    subject: {\n      type: \"user\",\n      ids: [\n        \"1\"\n      ],\n      relation: \"\"\n    }\n  }\n}).then((response) => {\n    // handle response\n})\n\265\003*\262\003\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\216\003\n\006source\022\203\003\032\200\003curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/delete\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  \"tupleFilter\": {\n    \"entity\": {\n      \"type\": \"organization\",\n      \"ids\": [\n        \"1\"\n      ]\n    },\n    \"relation\": \"admin\",\n    \"subject\": {\n      \"type\": \"user\",\n      \"ids\": [\n        \"1\"\n      ],\n      \"relation\": \"\"\n    }\n  },\n}\'\202\323\344\223\002(\"#/v1/tenants/{tenant_id}/data/delete:\001*'
  _globals['_DATA'].methods_by_name['DeleteRelationships']._loaded_options = None
  _globals['_DATA'].methods_by_name['DeleteRelationships']._serialized_options = b'\222A2\n\004Data\022\024delete relationships*\024relationships.delete\202\323\344\223\0021\",/v1/tenants/{tenant_id}/relationships/delete:\001*'
  _globals['_DATA'].methods_by_name['RunBundle']._loaded_options = None
  _globals['_DATA'].methods_by_name['RunBundle']._serialized_options = b'\222A\262\007\n\004Data\022\nrun bundle*\nbundle.runj\221\007\n\rx-codeSamples\022\377\0062\374\006\n\245\002*\242\002\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\202\002\n\006source\022\367\001\032\364\001rr, err: = client.Data.RunBundle(context.Background(), &v1.BundleRunRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n    Arguments: map[string]string{\n        \"creatorID\":      \"564\",\n        \"organizationID\": \"789\",\n    },\n})\n\212\002*\207\002\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\335\001\n\006source\022\322\001\032\317\001client.data.runBundle({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n    arguments: {\n        creatorID: \"564\",\n        organizationID: \"789\",\n    }\n}).then((response) => {\n    // handle response\n})\n\304\002*\301\002\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\235\002\n\006source\022\222\002\032\217\002curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/data/run-bundle\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n    \"arguments\": {\n        \"creatorID\": \"564\",\n        \"organizationID\": \"789\",\n    }\n}\'\202\323\344\223\002,\"\'/v1/tenants/{tenant_id}/data/run-bundle:\001*'
  _globals['_BUNDLE'].methods_by_name['Write']._loaded_options = None
  _globals['_BUNDLE'].methods_by_name['Write']._serialized_options = b'\222A\216\024\n\006Bundle\022\014write bundle*\014bundle.writej\347\023\n\rx-codeSamples\022\325\0232\322\023\n\323\006*\320\006\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\260\006\n\006source\022\245\006\032\242\006rr, err := client.Bundle.Write(context.Background(), &v1.BundleWriteRequest{\n    TenantId: \"t1\",\n    Bundles: []*v1.DataBundle{\n        {\n            Name: \"organization_created\",\n            Arguments: []string{\n                \"creatorID\",\n                \"organizationID\",\n            },\n            Operations: []*v1.Operation{\n                {\n                    RelationshipsWrite: []string{\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    },\n                    AttributesWrite: []string{\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    },\n                },\n            },\n        },\n    },\n})\n\233\006*\230\006\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\356\005\n\006source\022\343\005\032\340\005client.bundle.write({\n    tenantId: \"t1\",\n    bundles: [\n        {\n            name: \"organization_created\",\n            arguments: [\n                \"creatorID\",\n                \"organizationID\",\n            ],\n            operations: [\n                {\n                    relationships_write: [\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    ],\n                    attributes_write: [\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    ]\n                }\n            ]\n        }\n    ]\n}).then((response) => {\n    // handle response\n})\n\333\006*\330\006\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\264\006\n\006source\022\251\006\032\246\006curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/write\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"bundles\": [\n        {\n            \"name\": \"organization_created\"\n            \"arguments\": [\n                \"creatorID\",\n                \"organizationID\"\n            ],\n            \"operations\": [\n                {\n                    \"relationships_write\": [\n                        \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                        \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                    ],\n                    \"attributes_write\": [\n                        \"organization:{{.organizationID}}$public|boolean:false\",\n                    ],\n                },\n            ],\n        },\n    ],\n}\'\202\323\344\223\002)\"$/v1/tenants/{tenant_id}/bundle/write:\001*'
  _globals['_BUNDLE'].methods_by_name['Read']._loaded_options = None
  _globals['_BUNDLE'].methods_by_name['Read']._serialized_options = b'\222A\232\005\n\006Bundle\022\013read bundle*\013bundle.readj\365\004\n\rx-codeSamples\022\343\0042\340\004\n\270\001*\265\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\225\001\n\006source\022\212\001\032\207\001rr, err: = client.Bundle.Read(context.Background(), &v1.BundleReadRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n})\n\265\001*\262\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\210\001\n\006source\022~\032|client.bundle.read({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n}).then((response) => {\n    // handle response\n})\n\352\001*\347\001\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\303\001\n\006source\022\270\001\032\265\001curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/read\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n}\'\202\323\344\223\002(\"#/v1/tenants/{tenant_id}/bundle/read:\001*'
  _globals['_BUNDLE'].methods_by_name['Delete']._loaded_options = None
  _globals['_BUNDLE'].methods_by_name['Delete']._serialized_options = b'\222A\247\005\n\006Bundle\022\rdelete bundle*\rbundle.deletej\376\004\n\rx-codeSamples\022\354\0042\351\004\n\274\001*\271\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\231\001\n\006source\022\216\001\032\213\001rr, err: = client.Bundle.Delete(context.Background(), &v1.BundleDeleteRequest{\n    TenantId: \"t1\",\n    Name:     \"organization_created\",\n})\n\270\001*\265\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n\213\001\n\006source\022\200\001\032~client.bundle.delete({\n    tenantId: \"t1\",\n    name: \"organization_created\",\n}).then((response) => {\n    // handle response\n})\n\354\001*\351\001\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\305\001\n\006source\022\272\001\032\267\001curl --location --request POST \'localhost:3476/v1/tenants/{tenant_id}/bundle/delete\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"name\": \"organization_created\",\n}\'\202\323\344\223\002*\"%/v1/tenants/{tenant_id}/bundle/delete:\001*'
  _globals['_TENANCY'].methods_by_name['Create']._loaded_options = None
  _globals['_TENANCY'].methods_by_name['Create']._serialized_options = b'\222A\323\004\n\007Tenancy\022\rcreate tenant*\016tenants.createj\250\004\n\rx-codeSamples\022\226\0042\223\004\n\231\001*\226\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\nw\n\006source\022m\032krr, err: = client.Tenancy.Create(context.Background(), &v1.TenantCreateRequest {\n    Id: \"\"\n    Name: \"\"\n})\n\230\001*\225\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\nl\n\006source\022b\032`client.tenancy.create({\n   id: \"\",\n   name: \"\"\n}).then((response) => {\n    // handle response\n})\n\331\001*\326\001\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\262\001\n\006source\022\247\001\032\244\001curl --location --request POST \'http://localhost:3476/v1/tenants/create\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"id\": \"\",\n    \"name\": \"\"\n}\'\202\323\344\223\002\027\"\022/v1/tenants/create:\001*'
  _globals['_TENANCY'].methods_by_name['Delete']._loaded_options = None
  _globals['_TENANCY'].methods_by_name['Delete']._serialized_options = b'\222A\327\003\n\007Tenancy\022\rdelete tenant*\016tenants.deletej\254\003\n\rx-codeSamples\022\232\0032\227\003\n\214\001*\211\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\nj\n\006source\022`\032^rr, err: = client.Tenancy.Delete(context.Background(), &v1.TenantDeleteRequest {\n    Id: \"\"\n})\n\214\001*\211\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\n`\n\006source\022V\032Tclient.tenancy.delete({\n   id: \"\",\n}).then((response) => {\n    // handle response\n})\nw*u\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\nR\n\006source\022H\032Fcurl --location --request DELETE \'http://localhost:3476/v1/tenants/t1\'\202\323\344\223\002\022*\020/v1/tenants/{id}'
  _globals['_TENANCY'].methods_by_name['List']._loaded_options = None
  _globals['_TENANCY'].methods_by_name['List']._serialized_options = b'\222A\330\004\n\007Tenancy\022\014list tenants*\014tenants.listj\260\004\n\rx-codeSamples\022\236\0042\233\004\n\250\001*\245\001\n\r\n\005label\022\004\032\002go\n\014\n\004lang\022\004\032\002go\n\205\001\n\006source\022{\032ycr, err := client.Tenancy.List(context.Background(), &v1.TenantListRequest{\n    PageSize: 20,\n    ContinuousToken: \"\",\n})\n\205\001*\202\001\n\017\n\005label\022\006\032\004node\n\024\n\004lang\022\014\032\njavascript\nY\n\006source\022O\032Mlet res = client.tenancy.list({\n    pageSize: 20,\n    continuousToken: \"\",\n})\n\345\001*\342\001\n\017\n\005label\022\006\032\004cURL\n\016\n\004lang\022\006\032\004curl\n\276\001\n\006source\022\263\001\032\260\001curl --location --request POST \'localhost:3476/v1/tenants/list\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    \"page_size\": \"10\",\n    \"continuous_token\": \"\"\n}\'\202\323\344\223\002\025\"\020/v1/tenants/list:\001*'
  _globals['_PERMISSIONCHECKREQUEST']._serialized_start=158
  _globals['_PERMISSIONCHECKREQUEST']._serialized_end=1054
  _globals['_PERMISSIONCHECKREQUESTMETADATA']._serialized_start=1057
  _globals['_PERMISSIONCHECKREQUESTMETADATA']._serialized_end=1363
  _globals['_PERMISSIONCHECKRESPONSE']._serialized_start=1366
  _globals['_PERMISSIONCHECKRESPONSE']._serialized_end=1501
  _globals['_PERMISSIONCHECKRESPONSEMETADATA']._serialized_start=1503
  _globals['_PERMISSIONCHECKRESPONSEMETADATA']._serialized_end=1570
  _globals['_PERMISSIONEXPANDREQUEST']._serialized_start=1573
  _globals['_PERMISSIONEXPANDREQUEST']._serialized_end=2186
  _globals['_PERMISSIONEXPANDREQUESTMETADATA']._serialized_start=2189
  _globals['_PERMISSIONEXPANDREQUESTMETADATA']._serialized_end=2403
  _globals['_PERMISSIONEXPANDRESPONSE']._serialized_start=2405
  _globals['_PERMISSIONEXPANDRESPONSE']._serialized_end=2468
  _globals['_PERMISSIONLOOKUPENTITYREQUEST']._serialized_start=2471
  _globals['_PERMISSIONLOOKUPENTITYREQUEST']._serialized_end=3115
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA']._serialized_start=3118
  _globals['_PERMISSIONLOOKUPENTITYREQUESTMETADATA']._serialized_end=3433
  _globals['_PERMISSIONLOOKUPENTITYRESPONSE']._serialized_start=3435
  _globals['_PERMISSIONLOOKUPENTITYRESPONSE']._serialized_end=3499
  _globals['_PERMISSIONLOOKUPENTITYSTREAMRESPONSE']._serialized_start=3501
  _globals['_PERMISSIONLOOKUPENTITYSTREAMRESPONSE']._serialized_end=3569
  _globals['_PERMISSIONENTITYFILTERREQUEST']._serialized_start=3572
  _globals['_PERMISSIONENTITYFILTERREQUEST']._serialized_end=4150
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA']._serialized_start=4153
  _globals['_PERMISSIONENTITYFILTERREQUESTMETADATA']._serialized_end=4468
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST']._serialized_start=4471
  _globals['_PERMISSIONLOOKUPSUBJECTREQUEST']._serialized_end=5123
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA']._serialized_start=5126
  _globals['_PERMISSIONLOOKUPSUBJECTREQUESTMETADATA']._serialized_end=5442
  _globals['_PERMISSIONLOOKUPSUBJECTRESPONSE']._serialized_start=5444
  _globals['_PERMISSIONLOOKUPSUBJECTRESPONSE']._serialized_end=5511
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST']._serialized_start=5514
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUEST']._serialized_end=6091
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA']._serialized_start=6094
  _globals['_PERMISSIONSUBJECTPERMISSIONREQUESTMETADATA']._serialized_end=6456
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE']._serialized_start=6459
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE']._serialized_end=6663
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE_RESULTSENTRY']._serialized_start=6583
  _globals['_PERMISSIONSUBJECTPERMISSIONRESPONSE_RESULTSENTRY']._serialized_end=6663
  _globals['_WATCHREQUEST']._serialized_start=6666
  _globals['_WATCHREQUEST']._serialized_end=7122
  _globals['_WATCHRESPONSE']._serialized_start=7124
  _globals['_WATCHRESPONSE']._serialized_end=7187
  _globals['_SCHEMAWRITEREQUEST']._serialized_start=7190
  _globals['_SCHEMAWRITEREQUEST']._serialized_end=7535
  _globals['_SCHEMAWRITERESPONSE']._serialized_start=7537
  _globals['_SCHEMAWRITERESPONSE']._serialized_end=7598
  _globals['_SCHEMAPARTIALWRITEREQUEST']._serialized_start=7601
  _globals['_SCHEMAPARTIALWRITEREQUEST']._serialized_end=7946
  _globals['_SCHEMAPARTIALWRITEREQUEST_PARTIALSENTRY']._serialized_start=7868
  _globals['_SCHEMAPARTIALWRITEREQUEST_PARTIALSENTRY']._serialized_end=7946
  _globals['_SCHEMAPARTIALWRITEREQUESTMETADATA']._serialized_start=7948
  _globals['_SCHEMAPARTIALWRITEREQUESTMETADATA']._serialized_end=8023
  _globals['_SCHEMAPARTIALWRITERESPONSE']._serialized_start=8025
  _globals['_SCHEMAPARTIALWRITERESPONSE']._serialized_end=8093
  _globals['_SCHEMAREADREQUEST']._serialized_start=8096
  _globals['_SCHEMAREADREQUEST']._serialized_end=8490
  _globals['_SCHEMAREADREQUESTMETADATA']._serialized_start=8492
  _globals['_SCHEMAREADREQUESTMETADATA']._serialized_end=8559
  _globals['_SCHEMAREADRESPONSE']._serialized_start=8561
  _globals['_SCHEMAREADRESPONSE']._serialized_end=8632
  _globals['_SCHEMALISTREQUEST']._serialized_start=8635
  _globals['_SCHEMALISTREQUEST']._serialized_end=9052
  _globals['_SCHEMALISTRESPONSE']._serialized_start=9055
  _globals['_SCHEMALISTRESPONSE']._serialized_end=9186
  _globals['_SCHEMALIST']._serialized_start=9188
  _globals['_SCHEMALIST']._serialized_end=9258
  _globals['_DATAWRITEREQUEST']._serialized_start=9261
  _globals['_DATAWRITEREQUEST']._serialized_end=9783
  _globals['_DATAWRITEREQUESTMETADATA']._serialized_start=9785
  _globals['_DATAWRITEREQUESTMETADATA']._serialized_end=9851
  _globals['_DATAWRITERESPONSE']._serialized_start=9854
  _globals['_DATAWRITERESPONSE']._serialized_end=10014
  _globals['_RELATIONSHIPWRITEREQUEST']._serialized_start=10017
  _globals['_RELATIONSHIPWRITEREQUEST']._serialized_end=10484
  _globals['_RELATIONSHIPWRITEREQUESTMETADATA']._serialized_start=10486
  _globals['_RELATIONSHIPWRITEREQUESTMETADATA']._serialized_end=10560
  _globals['_RELATIONSHIPWRITERESPONSE']._serialized_start=10563
  _globals['_RELATIONSHIPWRITERESPONSE']._serialized_end=10730
  _globals['_RELATIONSHIPREADREQUEST']._serialized_start=10733
  _globals['_RELATIONSHIPREADREQUEST']._serialized_end=11292
  _globals['_RELATIONSHIPREADREQUESTMETADATA']._serialized_start=11295
  _globals['_RELATIONSHIPREADREQUESTMETADATA']._serialized_end=11468
  _globals['_RELATIONSHIPREADRESPONSE']._serialized_start=11470
  _globals['_RELATIONSHIPREADRESPONSE']._serialized_end=11580
  _globals['_ATTRIBUTEREADREQUEST']._serialized_start=11583
  _globals['_ATTRIBUTEREADREQUEST']._serialized_end=12140
  _globals['_ATTRIBUTEREADREQUESTMETADATA']._serialized_start=12143
  _globals['_ATTRIBUTEREADREQUESTMETADATA']._serialized_end=12313
  _globals['_ATTRIBUTEREADRESPONSE']._serialized_start=12315
  _globals['_ATTRIBUTEREADRESPONSE']._serialized_end=12434
  _globals['_DATADELETEREQUEST']._serialized_start=12437
  _globals['_DATADELETEREQUEST']._serialized_end=12905
  _globals['_DATADELETERESPONSE']._serialized_start=12908
  _globals['_DATADELETERESPONSE']._serialized_end=13068
  _globals['_RELATIONSHIPDELETEREQUEST']._serialized_start=13071
  _globals['_RELATIONSHIPDELETEREQUEST']._serialized_end=13445
  _globals['_RELATIONSHIPDELETERESPONSE']._serialized_start=13448
  _globals['_RELATIONSHIPDELETERESPONSE']._serialized_end=13616
  _globals['_BUNDLERUNREQUEST']._serialized_start=13619
  _globals['_BUNDLERUNREQUEST']._serialized_end=14092
  _globals['_BUNDLERUNREQUEST_ARGUMENTSENTRY']._serialized_start=14032
  _globals['_BUNDLERUNREQUEST_ARGUMENTSENTRY']._serialized_end=14092
  _globals['_BUNDLERUNRESPONSE']._serialized_start=14095
  _globals['_BUNDLERUNRESPONSE']._serialized_end=14254
  _globals['_BUNDLEWRITEREQUEST']._serialized_start=14257
  _globals['_BUNDLEWRITEREQUEST']._serialized_end=14625
  _globals['_BUNDLEWRITERESPONSE']._serialized_start=14627
  _globals['_BUNDLEWRITERESPONSE']._serialized_end=14670
  _globals['_BUNDLEREADREQUEST']._serialized_start=14673
  _globals['_BUNDLEREADREQUEST']._serialized_end=15013
  _globals['_BUNDLEREADRESPONSE']._serialized_start=15015
  _globals['_BUNDLEREADRESPONSE']._serialized_end=15080
  _globals['_BUNDLEDELETEREQUEST']._serialized_start=15083
  _globals['_BUNDLEDELETEREQUEST']._serialized_end=15425
  _globals['_BUNDLEDELETERESPONSE']._serialized_start=15427
  _globals['_BUNDLEDELETERESPONSE']._serialized_end=15469
  _globals['_TENANTCREATEREQUEST']._serialized_start=15471
  _globals['_TENANTCREATEREQUEST']._serialized_end=15568
  _globals['_TENANTCREATERESPONSE']._serialized_start=15570
  _globals['_TENANTCREATERESPONSE']._serialized_end=15633
  _globals['_TENANTDELETEREQUEST']._serialized_start=15635
  _globals['_TENANTDELETEREQUEST']._serialized_end=15682
  _globals['_TENANTDELETERESPONSE']._serialized_start=15684
  _globals['_TENANTDELETERESPONSE']._serialized_end=15747
  _globals['_TENANTLISTREQUEST']._serialized_start=15749
  _globals['_TENANTLISTREQUEST']._serialized_end=15865
  _globals['_TENANTLISTRESPONSE']._serialized_start=15867
  _globals['_TENANTLISTRESPONSE']._serialized_end=15974
  _globals['_PERMISSION']._serialized_start=15977
  _globals['_PERMISSION']._serialized_end=25385
  _globals['_WATCH']._serialized_start=25388
  _globals['_WATCH']._serialized_end=26415
  _globals['_SCHEMA']._serialized_start=26418
  _globals['_SCHEMA']._serialized_end=30483
  _globals['_DATA']._serialized_start=30486
  _globals['_DATA']._serialized_end=39161
  _globals['_BUNDLE']._serialized_start=39164
  _globals['_BUNDLE']._serialized_end=43460
  _globals['_TENANCY']._serialized_start=43463
  _globals['_TENANCY']._serialized_end=45449
# @@protoc_insertion_point(module_scope)
